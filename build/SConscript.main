# Copyright (c) 2006-2008 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import os
import shutil
import sys


p = ARGUMENTS.get('PROGRESS')
if p == 'spinner':
  Progress(['/\r', '|\r', '\\\r', '-\r'], interval=5, file=open('con', 'w'))
elif p == 'name':
  Progress('$TARGET\r', overwrite=True, file=open('con', 'w'))


default_warnings = ['no-missing-sconscript', 'no-no-parallel-support']
default_warnings = ['no-no-parallel-support']
SetOption('warn', default_warnings + GetOption('warn'))


load = ARGUMENTS.get('LOAD')
if load:
    load = load.split(',')
else:
    load = []


env = Environment(
    tools = ['component_setup'],
    CHROME_SRC_DIR = '$MAIN_DIR/..',
    DESTINATION_ROOT = '$MAIN_DIR/Hammer',
    TARGET_ROOT = '$DESTINATION_ROOT',

    LIBS_DIR              = '$OBJ_ROOT/Libs',

    BASE_DIR              = '$OBJ_ROOT/base',
    BREAKPAD_DIR          = '$OBJ_ROOT/breakpad',
    CHROME_DIR            = '$OBJ_ROOT/chrome',
    GEARS_DIR             = '$OBJ_ROOT/gears',
    GOOGLE_UPDATE_DIR     = '$OBJ_ROOT/google_update',
    GOOGLEURL_DIR         = '$OBJ_ROOT/googleurl',
    NET_DIR               = '$OBJ_ROOT/net',
    RLZ_DIR               = '$OBJ_ROOT/rlz',
    SANDBOX_DIR           = '$OBJ_ROOT/sandbox',
    SDCH_DIR              = '$OBJ_ROOT/sdch',
    SKIA_DIR              = '$OBJ_ROOT/skia',
    TESTING_DIR           = '$OBJ_ROOT/testing',
    THIRD_PARTY_DIR       = '$OBJ_ROOT/third_party',
    V8_DIR                = '$OBJ_ROOT/v8',
    WEBKIT_DIR            = '$OBJ_ROOT/webkit',

    GTEST_DIR             = '$TESTING_DIR/gtest',

    BSDIFF_DIR            = '$THIRD_PARTY_DIR/bsdiff',
    BSPATCH_DIR           = '$THIRD_PARTY_DIR/bspatch',
    BZIP2_DIR             = '$THIRD_PARTY_DIR/bzip2',
    ICU38_DIR             = '$THIRD_PARTY_DIR/icu38',
    LIBEVENT_DIR          = '$THIRD_PARTY_DIR/libevent',
    LIBJPEG_DIR           = '$THIRD_PARTY_DIR/libjpeg',
    LIBPNG_DIR            = '$THIRD_PARTY_DIR/libpng',
    LIBXML_DIR            = '$THIRD_PARTY_DIR/libxml',
    LIBXSLT_DIR           = '$THIRD_PARTY_DIR/libxslt',
    LZMA_SDK_DIR          = '$THIRD_PARTY_DIR/lzma_sdk',
    MODP_B64_DIR          = '$THIRD_PARTY_DIR/modp_b64',
    NPAPI_DIR             = '$THIRD_PARTY_DIR/npapi',
    ZLIB_DIR              = '$THIRD_PARTY_DIR/zlib',

    THIRD_PARTY_WEBKIT_DIR = '$THIRD_PARTY_DIR/WebKit',

    PYTHON=sys.executable,

    PERL                  = 'perl',
    PERL_INCLUDE_FLAG     = '-I ',
    PERL_INCLUDE_SUFFIX   = '',
    _PERL_INCLUDE_FLAGS   = ('${_concat(PERL_INCLUDE_FLAG, '
                             'PERL_INCLUDE_PATH, '
                             'PERL_INCLUDE_SUFFIX,'
                             '__env__, RDirs, TARGET, SOURCE)}'),
)

# We pre-resolve some common targets.  We end up spending lots of time
# resolving these over and over again.
env.Replace(
    CHROME_SRC_DIR        = str(env.Dir('$CHROME_SRC_DIR')),
    DESTINATION_ROOT      = str(env.Dir('$DESTINATION_ROOT')),
    TARGET_ROOT           = str(env.Dir('$TARGET_ROOT')),
    OBJ_ROOT              = str(env.Dir('$OBJ_ROOT')),
    WEBKIT_DIR            = str(env.Dir('$WEBKIT_DIR')),
)

env.Append(LIBPATH = ['$LIBS_DIR'])


def ChromeProgram(env, *args, **kw):
  return env.ComponentProgram(*args, **kw)
env.AddMethod(ChromeProgram)

def ChromeTestProgram(env, *args, **kw):
  return env.ComponentTestProgram(*args, **kw)
env.AddMethod(ChromeTestProgram)

def ChromeStaticLibrary(env, *args, **kw):
  kw['COMPONENT_STATIC'] = True
  return env.ComponentLibrary(*args, **kw)
env.AddMethod(ChromeStaticLibrary)

def ChromeSharedLibrary(env, *args, **kw):
  kw['COMPONENT_STATIC'] = False
  return [env.ComponentLibrary(*args, **kw)[0]]
env.AddMethod(ChromeSharedLibrary, "ChromeSharedLibrary")

def ChromeObject(env, *args, **kw):
  return env.ComponentObject(*args, **kw)
env.AddMethod(ChromeObject)



if env['PLATFORM'] == 'win32':
  env.Tool('target_platform_windows')
  env.Tool('target_debug')
  env.Tool('midl')

  # TODO(bradnelson): this is needed for now because target_platform_windows
  # has OS_WINDOWS defined in a weird way.
  env.FilterOut(CPPDEFINES = ['OS_WINDOWS=OS_WINDOWS'])

  env['PDB'] = '${TARGET.base}.pdb'

  processors = int(os.environ.get('NUMBER_OF_PROCESSORS', 1))
  SetOption('num_jobs', processors + 1)

  msvs_env = Environment(tools=['msvc', 'mslink', 'msvs'])['ENV']

  # Use the absolute path for MSVC because it might not be on the same drive
  # as our source checkout.
  visual_studio_path = (msvs_env['PATH'][0] +
                        ':/Program Files/Microsoft Visual Studio 8')

  env.Replace(
    CSCRIPT = 'c:\\Windows\\System32\\cscript',

    PLATFORMSDK_VISTA_REL = '../third_party/platformsdk_vista_6_0',
    PLATFORMSDK_VISTA = '$CHROME_SRC_DIR/third_party/platformsdk_vista_6_0',
    VISUAL_STUDIO = visual_studio_path,

    CYGWIN_DIR = env.Dir('$CHROME_SRC_DIR/third_party/cygwin'),
    CYGWIN_BIN_DIR = '$CYGWIN_DIR/bin',

    PERL = '$CYGWIN_BIN_DIR/perl.exe',

    MSVS_ENV = msvs_env,

    YACC = '$CYGWIN_BIN_DIR/bison.exe',
  )

  env.Append(
    ARFLAGS = [
        '/nologo',
    ],

    CCFLAGS = [
        '/nologo',

        '/Od',          # no optimization

        '/RTC1',
        '/MTd',         # static link to crt, and debug version
        '/Gy',
        '/GR-',

        '/W3',

        '/Z7',

        '/errorReport:prompt',

        '/wd4503',
        '/wd4819',
    ],

    CPPDEFINES = [
        '_CRT_SECURE_NO_DEPRECATE',
        '_CRT_NONSTDC_NO_WARNINGS',
        '_CRT_NONSTDC_NO_DEPRECATE',
        '_SCL_SECURE_NO_DEPRECATE',

        '_DEBUG',

        '_CRT_RAND_S',
        ('_WIN32_WINNT', '0x0600'),
        ('WINVER', '0x0600'),
        'WIN32',
        '_WINDOWS',
        ('_HAS_EXCEPTIONS', 0),
        'NOMINMAX',
        '_UNICODE',
        'UNICODE',

        'CERT_CHAIN_PARA_HAS_EXTRA_FIELDS',
        'WIN32_LEAN_AND_MEAN',
    ],

    CPPPATH = [
        '$PLATFORMSDK_VISTA/files/Include',
        '$PLATFORMSDK_VISTA/files/VC/INCLUDE',
        '$VISUAL_STUDIO/VC/atlmfc/include',
    ],

    LIBS = [
        'advapi32.lib',
        'comdlg32.lib',
        'gdi32.lib',
        'kernel32.lib',
        'msimg32.lib',
        'odbc32.lib',
        'odbccp32.lib',
        'ole32.lib',
        'oleaut32.lib',
        'psapi.lib',
        'shell32.lib',
        'user32.lib',
        'usp10.lib',
        'uuid.lib',
        'version.lib',
        'wininet.lib',
        'winspool.lib',
        'ws2_32.lib',

        'DelayImp.lib',
    ],

    LINKFLAGS = [
        '/nologo',
        '/DEBUG',
    ],

    ICU_LIBS = ['icu'],
  )

  env.Append(
    LIBPATH = [
        '$PLATFORMSDK_VISTA/files/Lib',
        '$PLATFORMSDK_VISTA/files/VC/LIB',
        '$VISUAL_STUDIO/VC/atlmfc/lib',
    ],
  )

  # TODO(sgk): remove once we upgrade to SCons 0.98.4
  for var in ['INCLUDE', 'LIB', 'PATH']:
    msvs_env[var] = msvs_env[var].split('|', 1)[0]
    env['ENV'][var] = env['ENV'][var].split('|', 1)[0]

  # Force scons to handle long include lines correctly.
  pchcom_fixed = env['PCHCOM']
  pchcom_fixed = pchcom_fixed.replace('${TARGETS[0]}', '$TARGET')
  pchcom_fixed = pchcom_fixed.replace('${TARGETS[1]}', '$TARGETS1')

  env.Replace(
      CCCOM = "${TEMPFILE('%s')}" % env['CCCOM'],
      CXXCOM = "${TEMPFILE('%s')}" % env['CXXCOM'],
      SHCCCOM = "${TEMPFILE('%s')}" % env['SHCCCOM'],
      SHCXXCOM = "${TEMPFILE('%s')}" % env['SHCXXCOM'],
      PCHCOM = "${TEMPFILE('%s')}" % pchcom_fixed,
      TARGETS1 = '${TARGETS[1]}',
  )

  env['ENV']['PROGRAMFILES'] = os.environ['PROGRAMFILES']
  env['ENV']['SystemDrive'] = os.environ['SystemDrive']
  env['ENV']['USERPROFILE'] = os.environ['USERPROFILE']

  env.AppendENVPath('PATH', ';C:\\WINDOWS\\system32')

elif env['PLATFORM'] == 'posix':
  env.Tool('target_platform_linux')
  env.Tool('target_debug')
  env.Tool('yacc')

  # TODO(bradnelson): this is needed for now because target_platform_linux has
  # OS_LINUX defined in a weird way.
  env.FilterOut(CPPDEFINES = ['OS_LINUX=OS_LINUX'])

  # Copy some environment variables from the outer environment to the
  # SCons.Environment if they exist.
  for envvar in ('CC', 'CXX'):
    if envvar in os.environ:
      env[envvar] = os.environ[envvar]
  # Copy these environment variables from the outer environment to the
  # environment that the build commands run in.
  # $HOME is needed by distcc so it can find its lock file.
  for envvar in ('HOME', 'DISTCC_HOSTS', 'CCACHE_DIR'):
    if envvar in os.environ:
      env['ENV'][envvar] = os.environ[envvar]

  # TODO(evanm): this is Linux-specific, not posix.
  # Parse /proc/cpuinfo for processor count.
  cpus = len([l for l in open('/proc/cpuinfo') if l.startswith('processor\t')])
  SetOption('num_jobs', cpus + 1)

  # For now, linux only loads the components we know work on Linux, by default.
  load = [
      'base',
      'breakpad',
      'chrome',
      'googleurl',
      'net',
      'sdch',
      'skia',
      'testing',
      'third_party',
      'v8',
      'webkit',
  ]

  excluded_warnings = [
    # TODO: Clean up uses of ext/hash_map and remove this.
    # (see unordered_map and base/hash_tables.h)
    '-Wno-deprecated',  # Needed for using ext/hash_map on GCC 4.3
    '-Wno-unknown-pragmas',  # In wtf's ref counting system
  ]
  env.Replace(
      CCFLAGS = ['-m32', '-g', '-pthread'],
      CXXFLAGS = ['-Wall', '-Werror'] + excluded_warnings,
      LINKFLAGS = ['-m32', '-pthread'],

    # We have several cases where archives depend on each other in a cyclic
    # fashion. (V8Bindings, libport and WebCore being the most significant
    # example.) Since the GNU linker does only a single pass over the archives
    # we need some extra trickery to deal with these unavoidable cycles. That
    # trickery is --start-group and --end-group (aka -( and -) ). That causes ld
    # to loop over the group until no more undefined symbols are found. In an
    # ideal world we would only make groups from those libraries which we knew
    # to be in cycles. However, that's tough with SCons, so we bodge it by
    # making all the archives a group by redefining the linking command here.
    SHLINKCOM = ('$SHLINK -shared -o $TARGET $SHLINKFLAGS $SOURCES '
                 '$_LIBDIRFLAGS '
                 '-Wl,--start-group $_LIBFLAGS -Wl,--end-group'),
    LINKCOM = ('$LINK -o $TARGET $LINKFLAGS $SOURCES '
               '$_LIBDIRFLAGS '
               '-Wl,--start-group $_LIBFLAGS -Wl,--end-group'),

      PERL = '/usr/bin/perl',
      PERL_INCLUDE_FLAG = '-I ',
      PERL_INCLUDE_SUFFIX = '',
      _PERL_INCLUDE_FLAGS = ('${_concat(PERL_INCLUDE_FLAG, '
                             'PERL_INCLUDE_PATH, '
                             'PERL_INCLUDE_SUFFIX,'
                             '__env__, RDirs, TARGET, SOURCE)}'),
  )

  env.Append(
      # We need rt for clock_gettime.
      LIBS = ['rt'],

      ICU_LIBS = ['icu'],
  )
  # Build with support for gcov when COVERAGE=1.
  if ARGUMENTS.get('COVERAGE') == '1':
    env.Append(CCFLAGS=['-fprofile-arcs', '-ftest-coverage'])
    env.Append(LINKFLAGS=['-fprofile-arcs'])

  # Build with system-provided NSS and GTK.
  env.ParseConfig('pkg-config --cflags --libs nss')
  env.ParseConfig('pkg-config --cflags --libs gtk+-2.0')

elif env['PLATFORM'] == 'darwin':
  env.Tool('target_platform_mac')
  env.Tool('target_debug')

  # For now, mac only loads the components we know work on Mac, by default.
  load = [
      'base',
      #'breakpad',
      'googleurl',
      'net',
      'sdch',
      'skia',
      'testing',
      'third_party',
      #'webkit',
  ]

  env.Replace(
      # Reproduce XCode's behavior of using gcc even to link C++,
      # and distinguishing it the -x c++ option.
      CC = 'gcc-4.2',
      CXX = 'g++-4.2',
      LINK = '$CXX',
  )

  env.Append(
      CFLAGS = [
          '-std=c99',
      ],
      CXXFLAGS = [
          '-fvisibility-inlines-hidden',
          '${str(SOURCE).endswith(".mm") and "-fobjc-gc" or ""}',
      ],
      CCFLAGS = [
          '-fmessage-length=0',
          '-pipe',
          '-O0',
          '-mdynamic-no-pic',
          '-Werror',
          '-Wnewline-eof',
          '-fvisibility=hidden',
          '-gdwarf-2',
          '-Wall',
          '-Wendif-labels',
          '-fstack-protector',
          '-fstack-protector-all',
      ],
      CPPDEFINES = [
          'DEBUG',
      ],

      FRAMEWORKPATH = [
          env.Dir('${TARGET_ROOT}'),
          '/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks',
      ],
      FRAMEWORKS = [
          'AppKit',
          'ApplicationServices',
          'Foundation',
      ],

      ICU_LIBS = ['icui18n', 'icuuc', 'icudata'],
  )

else:

  print "Unsupported SCons $PLATFORM value %s" % repr(env['PLATFORM'])
  Exit(1)


if ARGUMENTS.get('VERBOSE') in (None, '0'):
  env['CCCOMSTR'] = 'Compiling $TARGET ...'
  env['CXXCOMSTR'] = 'Compiling $TARGET ...'
  env['SHCCCOMSTR'] = 'Compiling $TARGET ...'
  env['SHCXXCOMSTR'] = 'Compiling $TARGET ...'
  env['ARCOMSTR'] = 'Archiving $TARGET ...'
  env['LINKCOMSTR'] = 'Linking $TARGET ...'
  env['BINDINGSCOMSTR'] = 'Building bindings in $TARGET ...'


# Add --clobber (for the buildbot).
# NOTE: seems to be crucial to do this before any builders are invoked.
AddOption('--clobber', action='store_true', dest='clobber', default=False,
          help='Delete build directory before building.')
if GetOption('clobber'):
  shutil.rmtree(env.Dir('$TARGET_ROOT').abspath, True)



# Use timestamps change, followed by MD5 for speed
env.Decider('MD5-timestamp')


# Overlay things from a layer below.
env.Dir('$OBJ_ROOT').addRepository(env.Dir('$CHROME_SRC_DIR'))
env.Dir('$OBJ_ROOT/googleurl').addRepository(env.Dir('$CHROME_SRC_DIR/build'))

included = [c for c in load if not c.startswith('-')]
excluded = [c[1:] for c in load if c.startswith('-')]
if not included:
  included = ['all']

components = ['all']

def LoadComponent(c):
  components.append(c)
  return (not GetOption('help') and
          c in included or
          ('all' in included and not c in excluded))

sconscripts = []

if LoadComponent('base'):
  sconscripts.append('$BASE_DIR/base.scons')

if LoadComponent('breakpad'):
  sconscripts.append('$BREAKPAD_DIR/SConscript')

if LoadComponent('chrome'):
  sconscripts.append('$CHROME_DIR/SConscript')

if LoadComponent('gears'):
  sconscripts.append('$GEARS_DIR/SConscript')

if LoadComponent('google_update'):
  sconscripts.append('$GOOGLE_UPDATE_DIR/SConscript')

if LoadComponent('googleurl'):
  # googleurl comes from a different repository so we provide the SConscript
  # file.
  sconscripts.append('$GOOGLEURL_DIR/googleurl.scons')

if LoadComponent('net'):
  sconscripts.append('$NET_DIR/net.scons')

if LoadComponent('rlz'):
  sconscripts.append('$RLZ_DIR/SConscript')

if LoadComponent('sandbox'):
  sconscripts.append('$SANDBOX_DIR/sandbox.scons')

if LoadComponent('sdch'):
  sconscripts.append('$SDCH_DIR/SConscript')

if LoadComponent('skia'):
  sconscripts.append('$SKIA_DIR/SConscript')

if LoadComponent('testing'):
  sconscripts.append('$TESTING_DIR/SConscript.gtest')

if LoadComponent('third_party'):
  sconscripts.extend([
      '$BSDIFF_DIR/SConscript',
      '$BZIP2_DIR/bzip2.scons',
      '$ICU38_DIR/icu38.scons',
      '$LIBPNG_DIR/libpng.scons',
      '$LZMA_SDK_DIR/SConscript',
      '$MODP_B64_DIR/modp_b64.scons',
      '$ZLIB_DIR/zlib.scons',
  ])
  # Temporary until we get these building on Mac.
  if env['PLATFORM'] != 'darwin':
    sconscripts.extend([
      '$LIBJPEG_DIR/SConscript',
      '$LIBXML_DIR/SConscript',
      '$LIBXSLT_DIR/SConscript',
    ])
  if env['PLATFORM'] in ('posix', 'darwin'):
    sconscripts.extend([
      '$LIBEVENT_DIR/libevent.scons',
    ])
  # This is temporary until we get this lib to build on other platforms.
  if env['PLATFORM'] == 'win32':
    sconscripts.extend([
        '$BSPATCH_DIR/SConscript',
    ])

if LoadComponent('v8') and env.Dir('$CHROME_SRC_DIR/v8').exists():
  env.SConscript('SConscript.v8',
                 exports=['env'])

if LoadComponent('webkit'):
  sconscripts.append('$WEBKIT_DIR/SConscript')

env.SConscript(sconscripts, exports=['env'])


help_fmt = """
Usage: hammer [SCONS_OPTIONS] [VARIABLES] [TARGET] ...

Supported build variables:

  BUILD_TYPE=type           Build type.  Also used as the subdirectory name
                              in which the build occurs.
  LOAD=[module,...]         Comma-separated list of components to load in the
                              dependency graph ('-' prefix excludes):
%s
  PROGRESS=type             Display a progress indicator:
                              name:  print each evaluated target name
                              spinner:  print a spinner every 5 targets
  VERBOSE=1                 Display full command lines
"""

if GetOption('help'):
  import textwrap
  tw = textwrap.TextWrapper(
    width = 78,
    initial_indent = ' '*32,
    subsequent_indent = ' '*32,
  )
  components = tw.fill(', '.join(components))

  Help(help_fmt % components)


Import('build_component')
Default(build_component)
