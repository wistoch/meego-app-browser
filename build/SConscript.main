# Copyright (c) 2006-2008 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import os
import shutil
import sys



# Overlay things from a layer below.
Dir('base').addRepository(Dir('../base'))
Dir('breakpad').addRepository(Dir('../breakpad'))
Dir('gears').addRepository(Dir('../gears'))
Dir('net').addRepository(Dir('../net'))
Dir('rlz').addRepository(Dir('../rlz'))
Dir('sandbox').addRepository(Dir('../sandbox'))
Dir('skia').addRepository(Dir('../skia'))
Dir('sdch').addRepository(Dir('../sdch'))
Dir('testing').addRepository(Dir('../testing'))
Dir('third_party').addRepository(Dir('../third_party'))
Dir('webkit').addRepository(Dir('../webkit'))

# This one is somewhat special.
Dir('../build').addRepository(Dir('../googleurl'))


#-----------------------------------------------------------------------


p = ARGUMENTS.get('PROGRESS')
if p == 'spinner':
  Progress(['/\r', '|\r', '\\\r', '-\r'], interval=5, file=open('con', 'w'))
elif p == 'name':
  Progress('$TARGET\r', overwrite=True, file=open('con', 'w'))


default_warnings = ['no-missing-sconscript', 'no-no-parallel-support']
SetOption('warn', default_warnings + GetOption('warn'))


load = ARGUMENTS.get('LOAD')
if load:
    load = load.split(',')
else:
    load = []


base_env = Environment(tools = ['component_setup'])
base_env.Replace(
    # $MAIN_DIR refers to the directory in which the SConstruct lives.
    # $ROOT_DIR is src/
    ROOT_DIR              = '$MAIN_DIR/..',

    BASE_DIR              = '$ROOT_DIR/base',
    BREAKPAD_DIR          = '$ROOT_DIR/breakpad',
    CHROME_DIR            = '$ROOT_DIR/chrome',
    GEARS_DIR             = '$ROOT_DIR/gears',
    GOOGLE_UPDATE_DIR     = '$ROOT_DIR/google_update',

    # Work around a limitation (bug?) in SCons in that, when we build
    # from a different directory, it forces the build targets defined
    # the SConscript.googleurl file to be relative to that file (i.e.,
    # here in the build/ directory with us), not relative to the
    # the SConstruct directory from which SCons was launched.  When
    # we roll forward to a version of SCons that fixes this, we'll
    # need to revert to the $BUILD_TYPE definition of GOOGLEURL_DIR.

    GOOGLEURL_DIR         = '$ROOT_DIR/build/googleurl',

    NET_DIR               = '$ROOT_DIR/net',
    RLZ_DIR               = '$ROOT_DIR/rlz',
    SANDBOX_DIR           = '$ROOT_DIR/sandbox',
    SDCH_DIR              = '$ROOT_DIR/sdch',
    SKIA_DIR              = '$ROOT_DIR/skia',
    TESTING_DIR           = '$ROOT_DIR/testing',
    THIRD_PARTY_DIR       = '$ROOT_DIR/third_party',
    V8_DIR                = '$ROOT_DIR/v8',
    WEBKIT_DIR            = '$ROOT_DIR/webkit',

    GTEST_DIR             = '$TESTING_DIR/gtest',

    BSDIFF_DIR            = '$THIRD_PARTY_DIR/bsdiff',
    BSPATCH_DIR           = '$THIRD_PARTY_DIR/bspatch',
    BZIP2_DIR             = '$THIRD_PARTY_DIR/bzip2',
    ICU38_DIR             = '$THIRD_PARTY_DIR/icu38',
    LIBEVENT_DIR          = '$THIRD_PARTY_DIR/libevent',
    LIBJPEG_DIR           = '$THIRD_PARTY_DIR/libjpeg',
    LIBPNG_DIR            = '$THIRD_PARTY_DIR/libpng',
    LIBXML_DIR            = '$THIRD_PARTY_DIR/libxml',
    LIBXSLT_DIR           = '$THIRD_PARTY_DIR/libxslt',
    LZMA_SDK_DIR          = '$THIRD_PARTY_DIR/lzma_sdk',
    MODP_B64_DIR          = '$THIRD_PARTY_DIR/modp_b64',
    NPAPI_DIR             = '$ROOT_DIR/third_party/npapi',
    ZLIB_DIR              = '$THIRD_PARTY_DIR/zlib',

    THIRD_PARTY_WEBKIT_DIR = '$ROOT_DIR/third_party/WebKit',

    PYTHON=sys.executable,

    # This is temporarily in flux.
    # Currently these are all relative to src/build, with the additional,
    # wrinkle that several addRepository lines at the top of this file cause
    # everything in src to be conceptually underlayed in src/build.
    # Thus things like src/SConscript.googleurl are listed directly,
    # but things like base/SConscript are down a layer.
    # Some of this will hopefully get cleaner if we move the SConstruct up a
    # layer.
    BUILD_SCONSCRIPTS = [
        'base/SConscript',
        'breakpad/SConscript',
        #'chrome/SConscript',
        #'gears/SConscript',
        #'google_update_dir/SConscript',
        'SConscript.googleurl',
        'net/SConscript',
        'rlz/SConscript',
        'sandbox/src/SConscript',
        'sdch/SConscript',
        'skia/SConscript',

        'testing/SConscript.gtest',

        'third_party/bsdiff/SConscript',
        'third_party/bzip2/SConscript',
        'third_party/icu38/SConscript',
        'third_party/libpng/SConscript',
        'third_party/lzma_sdk/SConscript',
        'third_party/modp_b64/SConscript',
        'third_party/zlib/SConscript',

        'third_party/libjpeg/SConscript',
        'third_party/libxml/SConscript',
        'third_party/libxslt/SConscript',

        'SConscript.v8',
        'webkit/SConscript',
    ],

    PERL                  = 'perl',
    PERL_INCLUDE_FLAG     = '-I ',
    PERL_INCLUDE_SUFFIX   = '',
    _PERL_INCLUDE_FLAGS   = ('${_concat(PERL_INCLUDE_FLAG, '
                             'PERL_INCLUDE_PATH, '
                             'PERL_INCLUDE_SUFFIX,'
                             '__env__, RDirs, TARGET, SOURCE)}'),
)

def ChromeProgram(env, *args, **kw):
  return env.ComponentProgram(*args, **kw)
base_env.AddMethod(ChromeProgram)

def ChromeTestProgram(env, *args, **kw):
  return env.ComponentTestProgram(*args, **kw)
base_env.AddMethod(ChromeTestProgram)

def ChromeStaticLibrary(env, *args, **kw):
  kw['COMPONENT_STATIC'] = True
  return env.ComponentLibrary(*args, **kw)
base_env.AddMethod(ChromeStaticLibrary)

def ChromeSharedLibrary(env, *args, **kw):
  kw['COMPONENT_STATIC'] = False
  return env.ComponentLibrary(*args, **kw)
base_env.AddMethod(ChromeSharedLibrary)

def ChromeObject(env, *args, **kw):
  return env.ComponentObject(*args, **kw)
base_env.AddMethod(ChromeObject)


if ARGUMENTS.get('VERBOSE') in (None, '0'):
  base_env['CCCOMSTR'] = 'Compiling $TARGET ...'
  base_env['CXXCOMSTR'] = 'Compiling $TARGET ...'
  base_env['SHCCCOMSTR'] = 'Compiling $TARGET ...'
  base_env['SHCXXCOMSTR'] = 'Compiling $TARGET ...'
  base_env['ARCOMSTR'] = 'Archiving $TARGET ...'
  base_env['LINKCOMSTR'] = 'Linking $TARGET ...'
  base_env['BINDINGSCOMSTR'] = 'Building bindings in $TARGET ...'








#-----------------------------------------------------------------------



# Create environment from which all Windows variants derive.
windows_env = base_env.Clone(tools = ['target_platform_windows'])
windows_env.Replace(
    CSCRIPT = 'c:\\Windows\\System32\\cscript',

    PLATFORMSDK_VISTA_REL = '../third_party/platformsdk_vista_6_0',
    PLATFORMSDK_VISTA = '#/$PLATFORMSDK_VISTA_REL',

    CYGWIN_DIR = '$MAIN_DIR/../third_party/cygwin',
    CYGWIN_BIN_DIR = '$CYGWIN_DIR/bin',

    PERL = '$CYGWIN_BIN_DIR/perl.exe',

    YACC = '$CYGWIN_BIN_DIR/bison.exe',

    ARFLAGS = [
        '/nologo',
    ],

    CCFLAGS = [
        '/nologo',

        '/Od',          # no optimization

        '/RTC1',
        '/MTd',         # static link to crt, and debug version
        '/Gy',
        '/GR-',

        '/W3',

        '/Z7',

        '/errorReport:prompt',

        '/wd4503',
        '/wd4819',
    ],

    CPPDEFINES = [
        '_CRT_SECURE_NO_DEPRECATE',
        '_CRT_NONSTDC_NO_WARNINGS',
        '_CRT_NONSTDC_NO_DEPRECATE',
        '_SCL_SECURE_NO_DEPRECATE',

        '_DEBUG',

        '_CRT_RAND_S',
        ('_WIN32_WINNT', '0x0600'),
        ('WINVER', '0x0600'),
        'WIN32',
        '_WINDOWS',
        ('_HAS_EXCEPTIONS', 0),
        'NOMINMAX',
        '_UNICODE',
        'UNICODE',

        'CERT_CHAIN_PARA_HAS_EXTRA_FIELDS',
        'WIN32_LEAN_AND_MEAN',
    ],

    CPPPATH = [
        '$PLATFORMSDK_VISTA/files/Include',
        '$PLATFORMSDK_VISTA/files/VC/INCLUDE',
        '$VISUAL_STUDIO/VC/atlmfc/include',
        '$MAIN_DIR/..',
    ],

    LIBS = [
        'advapi32',
        'comdlg32',
        'gdi32',
        'kernel32',
        'msimg32',
        'odbc32',
        'odbccp32',
        'ole32',
        'oleaut32',
        'psapi',
        'shell32',
        'user32',
        'usp10',
        'uuid',
        'version',
        'wininet',
        'winspool',
        'ws2_32',

        'DelayImp',
    ],

    LINKFLAGS = [
        '/nologo',
        '/DEBUG',
    ],
    ICU_LIBS = ['icu'],
  )

windows_env.Append(
    LIBPATH = [
        '$PLATFORMSDK_VISTA/files/Lib',
        '$PLATFORMSDK_VISTA/files/VC/LIB',
        '$VISUAL_STUDIO/VC/atlmfc/lib',
    ],
)

# Remove manifest gunk for now.
windows_env['LINKCOM'] = windows_env['LINKCOM'][0]
windows_env['SHLINKCOM'] = windows_env['SHLINKCOM'][0]

# TODO(sgk): find a more elegant way of doing this.
if base_env['PLATFORM'] == 'win32':
  msvs_env = Environment(tools=['msvc', 'mslink', 'msvs'])['ENV']
  windows_env['VISUAL_STUDIO'] = (msvs_env['PATH'][0] +
                                  ':/Program Files/Microsoft Visual Studio 8')

# TODO(bradnelson): find a cleaner way of doing this.
# Force scons to handle long include lines correctly.
pchcom_fixed = windows_env['PCHCOM']
pchcom_fixed = pchcom_fixed.replace('${TARGETS[0]}', '$TARGET')
pchcom_fixed = pchcom_fixed.replace('${TARGETS[1]}', '$TARGETS1')

windows_env.Replace(
    CCCOM = "${TEMPFILE('%s')}" % windows_env['CCCOM'],
    CXXCOM = "${TEMPFILE('%s')}" % windows_env['CXXCOM'],
    SHCCCOM = "${TEMPFILE('%s')}" % windows_env['SHCCCOM'],
    SHCXXCOM = "${TEMPFILE('%s')}" % windows_env['SHCXXCOM'],
    PCHCOM = "${TEMPFILE('%s')}" % pchcom_fixed,
    TARGETS1 = '${TARGETS[1]}',
)

# Create a debug windows variant.
debug_win_env = windows_env.Clone(tools = ['target_debug'])
debug_win_env.Replace(
    BUILD_TYPE = 'debug-win',
    BUILD_TYPE_DESCRIPTION = 'Windows debug variant',
    BUILD_GROUPS = ['default'],
)

# Create an optimized windows variant.
release_win_env = windows_env.Clone(tools = ['target_optimized'])
release_win_env.Replace(
    BUILD_TYPE = 'release-win',
    BUILD_TYPE_DESCRIPTION = 'Windows release variant',
)


#-----------------------------------------------------------------------



excluded_warnings = [
    # TODO: Clean up uses of ext/hash_map and remove this.
    # (see unordered_map and base/hash_tables.h)
    '-Wno-deprecated'  # Needed for using ext/hash_map on GCC 4.3
]

# Create the base linux environment.
linux_env = base_env.Clone(tools = ['target_platform_linux'])
linux_env.Replace(
    CCFLAGS = ['-m32', '-g', '-pthread'],
    CXXFLAGS = ['-Wall', '-Werror'] + excluded_warnings,
    LINKFLAGS = ['-m32', '-pthread'],

    # We have several cases where archives depend on each other in a cyclic
    # fashion. (V8Bindings, libport and WebCore being the most significant
    # example.) Since the GNU linker does only a single pass over the archives
    # we need some extra trickery to deal with these unavoidable cycles. That
    # trickery is --start-group and --end-group (aka -( and -) ). That causes ld
    # to loop over the group until no more undefined symbols are found. In an
    # ideal world we would only make groups from those libraries which we knew
    # to be in cycles. However, that's tough with SCons, so we bodge it by
    # making all the archives a group by redefining the linking command here.
    SHLINKCOM = ('$SHLINK -shared -o $TARGET $SHLINKFLAGS $SOURCES '
                 '$_LIBDIRFLAGS '
                 '-Wl,--start-group $_LIBFLAGS -Wl,--end-group'),
    LINKCOM = ('$LINK -o $TARGET $LINKFLAGS $SOURCES '
               '$_LIBDIRFLAGS '
               '-Wl,--start-group $_LIBFLAGS -Wl,--end-group'),

      # We need rt for clock_gettime.
    LIBS = ['rt'],
    ICU_LIBS = ['icu'],

    PERL = '/usr/bin/perl',
    PERL_INCLUDE_FLAG = '-I ',
    PERL_INCLUDE_SUFFIX = '',
    _PERL_INCLUDE_FLAGS = ('${_concat(PERL_INCLUDE_FLAG, '
                           'PERL_INCLUDE_PATH, '
                           'PERL_INCLUDE_SUFFIX,'
                           '__env__, RDirs, TARGET, SOURCE)}'),
)

# This conflicts with build_config.h
linux_env.FilterOut(CPPDEFINES= ['OS_LINUX=OS_LINUX'])

linux_env.FilterOut(
    BUILD_SCONSCRIPTS = [
        'sandbox/src/SConscript',
        'third_party/libjpeg/SConscript',
        'third_party/libxml/SConscript',
        'third_party/libxslt/SConscript',
        'third_party/bspatch/SConscript',
        'webkit/SConscript',
    ],
)

linux_env.Append(
    BUILD_SCONSCRIPTS = [
        'third_party/libevent/SConscript',
    ],
)

# Build with support for gcov when COVERAGE=1.
if ARGUMENTS.get('COVERAGE') == '1':
  linux_env.Append(CCFLAGS=['-fprofile-arcs', '-ftest-coverage'])
  linux_env.Append(LINKFLAGS=['-fprofile-arcs'])

# Build with system-provided NSS
if base_env['PLATFORM'] in ['posix', 'linux', 'linux2']:
  linux_env.ParseConfig('pkg-config --cflags --libs nss')
  linux_env.ParseConfig('pkg-config --cflags --libs glib-2.0')
  linux_env.ParseConfig('pkg-config --cflags --libs gtk+-2.0')

# Create a debug linux variant.
debug_linux_env = linux_env.Clone(tools = ['target_debug'])
debug_linux_env.Replace(
    BUILD_TYPE = 'debug-linux',
    BUILD_TYPE_DESCRIPTION = 'Linux debug variant',
    BUILD_GROUPS = ['default'],
)

# Create a optimized linux variant.
release_linux_env = linux_env.Clone(tools = ['target_optimized'])
release_linux_env.Replace(
    BUILD_TYPE = 'release-linux',
    BUILD_TYPE_DESCRIPTION = 'Linux release variant',
)




#-----------------------------------------------------------------------



# Create the base environment for the mac variant.
mac_env = base_env.Clone(tools = ['target_platform_mac'])
mac_env.Replace(
    # Reproduce XCode's behavior of using gcc even to link C++,
    # and distinguishing it the -x c++ option.
    CC = 'gcc-4.2',
    CXX = 'g++-4.2',
    LINK = '$CXX',

    CFLAGS = [
        '-std=c99',
    ],
    CXXFLAGS = [
        '-fvisibility-inlines-hidden',
        '${str(SOURCE).endswith(".mm") and "-fobjc-gc" or ""}',
    ],
    CCFLAGS = [
        '-fmessage-length=0',
        '-pipe',
        '-O0',
        '-mdynamic-no-pic',
        '-Werror',
        '-Wnewline-eof',
        '-fvisibility=hidden',
        '-gdwarf-2',
        '-Wall',
        '-Wendif-labels',
        '-fstack-protector',
        '-fstack-protector-all',
    ],
    CPPDEFINES = [
        'DEBUG',
    ],

    FRAMEWORKPATH = [
        '/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks',
    ],
    FRAMEWORKS = [
        'AppKit',
        'ApplicationServices',
        'Foundation',
    ],
    ICU_LIBS = ['icui18n', 'icuuc', 'icudata'],
)

mac_env.FilterOut(
    BUILD_SCONSCRIPTS = [
        'third_party/libjpeg/SConscript',
        'third_party/libxml/SConscript',
        'third_party/libxslt/SConscript',
        'third_party/bspatch/SConscript',
        'webkit/SConscript',
    ],
)

mac_env.Append(
    BUILD_SCONSCRIPTS = [
        'third_party/libevent/SConscript',
    ],
)


# Add --clobber (for the buildbot).
# NOTE: seems to be crucial to do this before any builders are invoked.
AddOption('--clobber', action='store_true', dest='clobber', default=False,
          help='Delete build directory before building.')
if GetOption('clobber'):
  shutil.rmtree(base_env.Dir('$DESTINATION_ROOT').abspath, True)

# Create a mac debug variant.
debug_mac_env = mac_env.Clone(tools = ['target_debug'])
debug_mac_env.Replace(
    BUILD_TYPE = 'debug-mac',
    BUILD_TYPE_DESCRIPTION = 'Mac debug variant',
    BUILD_GROUPS = ['default'],
)

# Create a mac opt variant.
release_mac_env = mac_env.Clone(tools = ['target_optimized'])
release_mac_env.Replace(
    BUILD_TYPE = 'release-mac',
    BUILD_TYPE_DESCRIPTION = 'Mac release variant',
)




#-----------------------------------------------------------------------


Help("""
PROGRESS=type             Display a progress indicator:
                          name:  print each evaluated target name
                          spinner:  print a spinner every 5 targets
VERBOSE=1                 Display full command lines
""")


#-----------------------------------------------------------------------

# By default, the Hammer modules execute the tests to capture test
# output, but do it from a location that doesn't (yet) work for us.
# Replace the Hammer defaults with Chromium's.
Default(None)
Import('build_component')
Default(Alias(build_component))

# TODO:  Get to the point of using Hammer's aliases.
#Default([base_env.Alias('all_programs'),
#         base_env.Alias('all_libraries')])

# Create a list of all variants that are buildable.
environment_list = [
    debug_mac_env,
    release_mac_env,
    debug_win_env,
    release_win_env,
    debug_linux_env,
    release_linux_env,
]

# For each variant in the environment_list, build the SConscript files in its
# BUILD_SCONSCRIPTS variable.
BuildComponents(environment_list)

#-----------------------------------------------------------------------

# Generate a solution, defer to the end.
solution_env = base_env.Clone(tools = ['visual_studio_solution'])
solution = solution_env.Solution(
    'chrome_hammer', environment_list,
    exclude_pattern = '.*third_party.*',
    extra_build_targets = {
        'Firefox': 'c:/Program Files/Mozilla FireFox/firefox.exe',
    },
)
solution_env.Alias('solution', solution)
