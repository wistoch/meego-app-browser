# Copyright (c) 2006-2008 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

__doc__ = """
Master configuration for building chrome components.
"""

Import('env')

# Arrange for Hammer to add all programs to the 'chrome' Alias.
env.Append(
    COMPONENT_PROGRAM_GROUPS = ['chrome'],
    COMPONENT_TEST_PROGRAM_GROUPS = ['chrome'],
    STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME = 1,
)


# TODO(sgk):  move the ChromeVersionRC builder into a Tool module
def chrome_version_emitter(target, source, env):
    source.append(env.File('$CHROME_SRC_DIR/chrome/VERSION'))
    # TODO(sgk):  parameterize for chromium-vs.-google_chrome
    source.append(env.File('$CHROME_SRC_DIR/chrome/'
                           + 'app/theme/google_chrome/BRANDING'))
    return target, source

b = Builder(action = '$CHROME_VERSION_RC_COM',
            emitter = chrome_version_emitter)

env['BUILDERS']['ChromeVersionRC'] = b

env.Replace(
    # NOTE: the / after $CHROME_SRC_DIR/chrome/ is required because
    # version.bat assumes a path with a trailing slash.
    CHROME_VERSION_RC_COM =
        '$VERSION_BAT $SOURCE $CHROME_SRC_DIR/chrome/ $PWD $TARGET',
    VERSION_BAT = env.File(
        '$CHROME_SRC_DIR/chrome/tools/build/win/version.bat'),
    PWD = Dir('.'),
)


sconscript_files = env.ChromiumLoadComponentSConscripts(
    'SConscript',

    LOAD_NAMES = ['chrome'],

    chrome_sln          = 'chrome_sln.scons',

    locales             = 'app/locales/locales.scons',
    chrome_resources    = 'app/chrome_resources.scons',
    chrome_strings      = 'app/chrome_strings.scons',
    theme_dll           = 'app/theme/theme_dll.scons',

    browser             = 'browser/browser.scons',
    debugger            = 'browser/debugger/debugger.scons',

    common              = 'common/common.scons',
    ipc_tests           = 'common/ipc_tests.scons',

    #gcapi_dll           = 'installer/gcapi/gcapi_dll.scons',
    #gcapi_lib           = 'installer/gcapi/gcapi_lib.scons',
    #gcapi_test          = 'installer/gcapi/gcapi_test.scons',
    mini_installer      = 'installer/mini_installer/mini_installer.scons',
    setup               = 'installer/setup/setup.scons',
    #installer_unittests = 'installer/util/installer_unittests.scons',
    util                = 'installer/util/util.scons',
    installer_unittests = 'installer/util/installer_unittests.scons',

    plugin              = 'plugin/plugin.scons',

    renderer            = 'renderer/renderer.scons',

    activex_test_controls = 
			'test/activex_test_control/activex_test_control.scons',
    automated_ui_tests  = 'test/automated_ui_tests/automated_ui_tests.scons',
    automtion           = 'test/automation/automation.scons',
    test_chrome_plugin  = 'test/chrome_plugin/test_chrome_plugin.scons',
    interactive_ui_tests = 'test/interactive_ui/interactive_ui_tests.scons',
    memory_test         = 'test/memory_test/memory_test.scons',
    mini_installer_test = 'test/mini_installer_test/mini_installer_test.scons',
    page_cycler_tests   = 'test/page_cycler/page_cycler_tests.scons',
    perf_tests          = 'test/perf/perftests.scons',
    plugin_tests        = 'test/plugin/plugin_tests.scons',
    reliability_tests   = 'test/reliability/reliability_tests.scons',
    security_tests      = 'test/security_tests/security_tests.scons',
    selenium_tests      = 'test/selenium/selenium_tests.scons',
    startup_tests       = 'test/startup/startup_tests.scons',
    tab_switching_test  = 'test/tab_switching/tab_switching_test.scons',
    ui_tests            = 'test/ui/ui_tests.scons',
    unit_tests          = 'test/unit/unit_tests.scons',

    convert_dict        = 'tools/convert_dict/convert_dict.scons',
    crash_service       = 'tools/crash_service/crash_service.scons',
    flush_cache         = 'tools/perf/flush_cache/flush_cache.scons',
    generate_profile    = 'tools/profiles/generate_profile.scons',
    image_diff          = 'tools/test/image_diff/image_diff.scons',
)

SConscript(sconscript_files, exports=['env'])
