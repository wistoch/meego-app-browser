# Copyright (c) 2006-2008 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')

env = env.Clone()

env.SConscript([
    '$BREAKPAD_DIR/using_breakpad.scons',
    '$CHROME_DIR/third_party/wtl/using_wtl.scons',
    '$ICU38_DIR/using_icu38.scons',
    '$LIBJPEG_DIR/using_libjpeg.scons',
    '$LIBPNG_DIR/using_libpng.scons',
    '$LIBXML_DIR/using_libxml.scons',
    '$NPAPI_DIR/using_npapi.scons',
    '$SKIA_DIR/using_skia.scons',
    '$ZLIB_DIR/using_zlib.scons',
], {'env':env})

env.Prepend(
    CPPPATH = [
        '$TARGET_ROOT/grit_derived_sources',
        '$CHROME_DIR/app',
        '$CHROME_SRC_DIR',
    ],
)

env.Append(
    CPPPATH = [
        '$WEBKIT_DIR/build/localized_strings',
    ],
)

if env.Bit('windows'):
  env.Prepend(
      CPPPATH = [
          '$CHROME_DIR/tools/build/win',
      ],
  )

input_files = []

input_files.extend([
  'animation.cc',
  'chrome_constants.cc',
  'chrome_counters.cc',
  'chrome_paths.cc',
  'chrome_switches.cc',
  'common_glue.cc',
  'debug_flags.cc',
  'env_vars.cc',
  'gfx/chrome_canvas.cc',
  'gfx/color_utils.cc',
  'ipc_channel_proxy.cc',
  'ipc_message.cc',
  'ipc_message_utils.cc',
  'ipc_sync_message.cc',
  'jpeg_codec.cc',
  'json_value_serializer.cc',
  'libxml_utils.cc',
  'logging_chrome.cc',
  'message_router.cc',
  'net/cookie_monster_sqlite.cc',
  'notification_registrar.cc',
  'notification_service.cc',
  'pref_member.cc',
  'pref_names.cc',
  'property_bag.cc',
  'render_messages.cc',
  'slide_animation.cc',
  'sqlite_compiled_statement.cc',
  'sqlite_utils.cc',
  'task_queue.cc',
  'throb_animation.cc',
  'thumbnail_score.cc',
  'visitedlink_common.cc',
])

if not env.Bit('mac'):
  # TODO(port): Port to Mac.
  input_files.extend([
      'pref_service.cc',
      'resource_dispatcher.cc',
      'time_format.cc',
  ])

if env.Bit('windows'):
  # TODO(port): Port these.
  input_files.extend([
      'child_process.cc',
      'chrome_plugin_lib.cc',
      'chrome_plugin_util.cc',
      'chrome_process_filter.cc',
      'classfactory.cc',
      'drag_drop_types.cc',
      'gfx/chrome_canvas_win.cc',
      'gfx/emf.cc',
      'gfx/icon_util.cc',
      'gfx/path.cc',
      'gfx/text_elider.cc',
      'ipc_logging.cc',
      'ipc_sync_channel.cc',
      'jstemplate_builder.cc',
      'l10n_util.cc',
      'net/url_request_intercept_job.cc',
      'os_exchange_data.cc',
      'plugin_messages.cc',
      'process_watcher.cc',
      'resource_bundle.cc',
      'security_filter_peer.cc',
      'win_safe_util.cc',
      'win_util.cc',
      'worker_thread_ticker.cc',
  ])

if env.Bit('windows'):
  # Windows specific files
  input_files.extend([
      'gfx/chrome_font_win.cc',
      'ipc_channel_win.cc',
  ])
elif env.Bit('linux'):
  input_files.extend([
      'gfx/chrome_canvas_skia.cc',
      'gfx/chrome_font_skia.cc',
  ])

if env.Bit('posix'):
  input_files.extend([
      'ipc_channel_posix.cc',
  ])


if not env.Bit('mac'):
  # TODO(port): This should be enabled for all platforms.
  env.ChromeLibrary('common', input_files)

env.ChromeMSVSProject('$CHROME_DIR/common/common.vcproj',
                dependencies = [
                    '$LIBXML_DIR/build/libxml_config.vcproj',
                    '$CHROME_DIR/app/generated_resources.vcproj',
                ],
                guid='{899F1280-3441-4D1F-BA04-CCD6208D9146}')
