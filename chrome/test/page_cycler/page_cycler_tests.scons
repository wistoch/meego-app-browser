# Copyright (c) 2006-2008 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')

env = env.Clone()

env.ApplySConscript([
    '$BASE_DIR/using_base.scons',
    '$BASE_DIR/gfx/using_base_gfx.scons',
    '$CHROME_SRC_DIR/build/using_googleurl.scons',
    '$CHROME_SRC_DIR/tools/grit/build/using_generated_resources.scons',
    '$GTEST_DIR/../using_gtest.scons',
    '$ICU38_DIR/using_icu38.scons',
    '$LIBPNG_DIR/using_libpng.scons',
    '$MODP_B64_DIR/using_modp_b64.scons',
    '$NET_DIR/using_net.scons',
    '$SKIA_DIR/using_skia.scons',
    '$ZLIB_DIR/using_zlib.scons',
    '$CHROME_SRC_DIR/build/using_v8.scons',
])

env.Prepend(
    CPPDEFINES = [
        'UI_TEST',
    ],
    CPPPATH = [
        '$CHROME_SRC_DIR',
    ],
    LIBS = [
        'automation',
        'browser',
        'common',
        'glue',
        'WTF',
        # needed for shared link deps
        'sqlite',
        'xslt',

        'WebKit',
        'WebCore',
        'V8Bindings',
        'v8_snapshot',
        'libxml',
        'port',
        'renderer',
        'JavaScriptCore_pcre',

        'jpeg',

        'bzip2',
        'X11',
        'Xrender',
        'Xext',

        'media',
        'sdch',
        'views',

        'hunspell',
        'printing',
        'modp_b64',
        'debugger',
    ],
)

if env.Bit('windows'):
  env.Prepend(
      LINKFLAGS = [
          '/INCREMENTAL',
          '/DEBUG',

          '/DELAYLOAD:"dwmapi.dll"',
          '/DELAYLOAD:"uxtheme.dll"',

          '/MACHINE:X86',
          '/FIXED:No',

          '/safeseh',
          '/dynamicbase',
          '/ignore:4199',
          '/nxcompat',
      ],
      LIBS = [
          'comsupp',
          'oleacc',
          'psapi',
          'rpcrt4',
          'winmm',
      ],
  )

input_files = ChromeFileList([
  # TODO(sgk):  violate standard indentation so we don't have to
  # reindent too much when we remove the explicit MSVSFilter() calls
  # in favor of generating the hierarchy to reflect the file system.
  MSVSFilter('Common', [
    '$CHROME_DIR/tools/build/win/precompiled_wtl$OBJSUFFIX',
    '$CHROME_DIR/tools/build/win/precompiled_wtl.h',
    '$CHROME_DIR/test/ui/run_all_unittests$OBJSUFFIX',
    '$CHROME_DIR/test/testing_browser_process.h',
    '$CHROME_DIR/test/ui/ui_test$OBJSUFFIX',
    '$CHROME_DIR/test/ui/ui_test.h',
    '$CHROME_DIR/test/ui/ui_test_suite$OBJSUFFIX',
  ]),
  MSVSFilter('MemoryUsage', [
    '$CHROME_DIR/test/perf/mem_usage$OBJSUFFIX',
    '$CHROME_DIR/test/perf/mem_usage.h',
  ]),
  MSVSFilter('TestPageCycler', [
    'page_cycler_test.cc',
  ]),
])

if not env.Bit('windows'):
  # Windows-specific.
  input_files.Remove(
      '$CHROME_DIR/tools/build/win/precompiled_wtl$OBJSUFFIX',
      '$CHROME_DIR/tools/build/win/precompiled_wtl.h',
  )

  # TODO(port): Remove files from this list as they get ported.
  input_files.Remove(
      '$CHROME_DIR/test/perf/mem_usage$OBJSUFFIX',
  )

env.ChromeTestProgram('page_cycler_tests', input_files)

p = env.ChromeMSVSProject('page_cycler_tests.vcproj',
                          dest=('$CHROME_SRC_DIR/chrome/'
                                + 'test/page_cycler/page_cycler_tests.vcproj'),
                          guid='{C9E0BD1D-B175-4A91-8380-3FDC81FAB9D7}',
                          dependencies = [
                              '$CHROME_DIR/test/automation/automation.vcproj',
                              '$BASE_DIR/build/base.vcproj',
                              '$NET_DIR/build/net.vcproj',
                              '$CHROME_DIR/browser/browser.vcproj',
                              '$MODP_B64_DIR/modp_b64.vcproj',
                              '$CHROME_DIR/app/chrome_exe.vcproj',
                              '$ZLIB_DIR/zlib.vcproj',
                              '$CHROME_DIR/common/common.vcproj',
                              '$ICU38_DIR/build/icu.vcproj',
                              '$BASE_DIR/build/base_gfx.vcproj',
                              '$TESTING_DIR/gtest.vcproj',
                              '$LIBPNG_DIR/libpng.vcproj',
                              '$SKIA_DIR/skia.vcproj',
                              '$GOOGLEURL_DIR/build/googleurl.vcproj',
                              '$CHROME_DIR/browser/views/browser_views.vcproj',
                          ],
                          # TODO(sgk):  when we can intuit the hierarchy
                          # from the built targets.
                          #buildtargets=TODO,
                          files=input_files,
                          local_directory_prefix='./',
                          tools=[
                              'VCPreBuildEventTool',
                              'VCCustomBuildTool',
                              'VCXMLDataGeneratorTool',
                              'VCWebServiceProxyGeneratorTool',
                              'VCMIDLTool',
                              'VCCLCompilerTool',
                              'VCManagedResourceCompilerTool',
                              'VCResourceCompilerTool',
                              'VCPreLinkEventTool',
                              MSVSTool('VCLinkerTool',
                                       AdditionalDependencies='winmm.lib'),
                              'VCALinkTool',
                              'VCManifestTool',
                              'VCXDCMakeTool',
                              'VCBscMakeTool',
                              'VCFxCopTool',
                              'VCAppVerifierTool',
                              'VCWebDeploymentTool',
                              'VCPostBuildEventTool',
                          ],
                          ConfigurationType='1')


p.AddConfig('Debug|Win32',
            InheritedPropertySheets=[
                '$(SolutionDir)../build/common.vsprops',
                '$(SolutionDir)../build/debug.vsprops',
                '../../tools/build/win/precompiled_wtl.vsprops',
                '../../tools/build/win/unit_test.vsprops',
                '../../tools/build/win/ui_test.vsprops',
                '../../tools/build/win/test_memory_usage.vsprops',
                '$(SolutionDir)../skia/using_skia.vsprops',
                '$(SolutionDir)../testing/using_gtest.vsprops',
            ])

p.AddConfig('Release|Win32',
            InheritedPropertySheets=[
                '$(SolutionDir)../build/common.vsprops',
                '$(SolutionDir)../build/release.vsprops',
                '../../tools/build/win/unit_test.vsprops',
                '../../tools/build/win/ui_test.vsprops',
                '../../tools/build/win/test_memory_usage.vsprops',
                '$(SolutionDir)../skia/using_skia.vsprops',
                '$(SolutionDir)../testing/using_gtest.vsprops',
            ])

p.AddFileConfig('../../tools/build/win/precompiled_wtl.cc',
                'Debug|Win32',
                tools=[
                    MSVSTool('VCCLCompilerTool',
                             UsePrecompiledHeader='1'),
                ])
