# Copyright (c) 2008 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import os

import utils

Import('env')

env = env.Clone() 


# Building .from_bin.cc files.

# Must be run from within the gears dir.  More hoops to jump through to fix up
# path names and arguments.
env.Replace(
# len() + 1 to include trailing '/'
# TODO: is there a better way to strip off $OPEN_DIR from $SOURCE?
    LEN_OPEN_DIR = len(os.path.normpath(env.subst('$OPEN_DIR'))) + 1,
    BIN2CPP = 'cd $OPEN_DIR && python tools/bin2cpp.py',
    BIN2CPPCOM = '$BIN2CPP ${str(SOURCE)[LEN_OPEN_DIR:]} > ${TARGET.abspath}',
)
bin2cpp_builder = Builder(action = '$BIN2CPPCOM')
env.Append(BUILDERS = {'Bin2cpp': bin2cpp_builder})


# C++ flags.

env.Prepend(
    CPPDEFINES = [
# Common items, like notifier, is not related to any browser.
        'BROWSER_NONE=1',
    ]
)

# Include the input file list.
env.SConscript('SConscript.inputs', exports={'env': env, 'env_res': None})
Import('env_inputs')
env = env_inputs


#-----------------------------------------------------------------------------
# Generate the dependency tree.

common_targets = {}

def PatternRule(t, s): return utils.PatternRule(t, s, env)
def GetInputs(var): return utils.GetInputs(var, env)

# genfiles/%: %.m4
common_targets['m4'] = \
    [env.M4(*PatternRule('$COMMON_GENFILES_DIR/${SOURCE.filebase}', src))
     for src in GetInputs('$COMMON_M4SRCS')]

# genfiles/%.from_bin.cc: %
if GetInputs('$COMMON_BINSRCS'):
  bins = [env.Bin2cpp(*PatternRule(
              '$COMMON_GENFILES_DIR/${SOURCE.file}.from_bin.cc', src))
         for src in GetInputs('$COMMON_BINSRCS')]
  common_targets['link'] = [env.SharedObject(bin) for bin in bins]
else:
  common_targets['link'] = []

Export('common_targets')

env.ChromeProgram('ipc_test', GetInputs('$IPC_TEST_CPPSRCS'))

# Note: crash_sender.exe name needs to stay in sync with name used in
# exception_handler_win32.cc and exception_handler_osx/google_breakpad.mm.
crash_sender = None
if env['OS'] == 'win32':
  crash_sender = env.ChromeProgram('crash_sender',
      GetInputs('$CRASH_SENDER_CPPSRCS'),
      LIBS = Split('advapi32.lib shell32.lib wininet.lib'))
elif env['OS'] == 'osx':
  pass
  # crash_sender = env.Program('crash_sender', crash_sender_srcs,
  #     FRAMEWORKS = Split('Carbon Cocoa Foundation IOKit SystemConfiguration'),
  #     LIBS='stdc++')
env.Alias('gears', crash_sender)
