# Copyright (c) 2006-2008 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

__doc__ = """
Configuration for building media.lib / libmedia.a.
"""

Import('env')

env = env.Clone()

env.SConscript([
    '$ICU38_DIR/using_icu38.scons',
], {'env':env})

env.Prepend(
    CPPPATH = [
        '$CHROME_SRC_DIR',
    ],
)

input_files = ChromeFileList([
  # TODO(sgk):  violate standard indentation so we don't have to
  # reindent too much when we remove the explicit MSVSFilter() calls
  # in favor of generating the hierarchy to reflect the file system.
  MSVSFilter('base', [
    'base/buffers.h',
    'base/data_buffer.cc',
    'base/data_buffer.h',
    'base/factory.h',
    'base/filter_host.h',
    'base/filter_host_impl.cc',
    'base/filter_host_impl.h',
    'base/filters.h',
    'base/media_format.cc',
    'base/media_format.h',
    'base/pipeline.h',
    'base/pipeline_impl.cc',
    'base/pipeline_impl.h',
    'base/synchronizer.cc',
    'base/synchronizer.h',
  ]),
  MSVSFilter('filters', [
    'filters/audio_renderer_base.cc',
    'filters/audio_renderer_base.h',
    'filters/audio_renderer_impl.cc',
    'filters/audio_renderer_impl.h',
    'filters/file_data_source.cc',
    'filters/file_data_source.h',
    'filters/null_audio_renderer.cc',
    'filters/null_audio_renderer.h',
    'filters/video_renderer_base.cc',
    'filters/video_renderer_base.h',
  ]),
  MSVSFilter('audio', [
    'audio/win/audio_manager_win.h',
    'audio/audio_output.h',
    'audio/win/audio_output_win.cc',
    'audio/simple_sources.h',
    'audio/win/simple_sources_win.cc',
    'audio/win/waveout_output_win.cc',
    'audio/win/waveout_output_win.h',
  ]),
])

if env.Bit('linux'):
  input_files.Extend([
      'audio/linux/audio_manager_linux.cc',
  ])

if env.Bit('mac'):
  input_files.Extend([
      'audio/mac/audio_manager_mac.cc',
  ])

if not env.Bit('windows'):
  # Windows-specific files.
  input_files.Remove(
      'audio/win/audio_output_win.cc',
      'audio/win/simple_sources_win.cc',
      'audio/win/waveout_output_win.cc',
  )

env.ChromeLibrary('media', input_files)

p = env.ChromeMSVSProject('build/media.vcproj',
                          dest='$CHROME_SRC_DIR/media/build/media.vcproj',
                          guid='{6AE76406-B03B-11DD-94B1-80B556D89593}',
                          keyword='Win32Proj',
                          # TODO(sgk):  when we can intuit the hierarchy
                          # from the built targets.
                          #buildtargets=TODO,
                          files=input_files,
                          tools=[
                              'VCPreBuildEventTool',
                              'VCCustomBuildTool',
                              'VCXMLDataGeneratorTool',
                              'VCWebServiceProxyGeneratorTool',
                              'VCMIDLTool',
                              'VCCLCompilerTool',
                              'VCManagedResourceCompilerTool',
                              'VCResourceCompilerTool',
                              'VCPreLinkEventTool',
                              'VCLibrarianTool',
                              'VCALinkTool',
                              'VCXDCMakeTool',
                              'VCBscMakeTool',
                              'VCFxCopTool',
                              'VCPostBuildEventTool',
                          ],
                          ConfigurationType='4')

p.AddConfig('Debug|Win32',
            InheritedPropertySheets=[
                '$(SolutionDir)../build/debug.vsprops',
            ])

p.AddConfig('Release|Win32',
            InheritedPropertySheets=[
                '$(SolutionDir)../build/release.vsprops',
            ])
