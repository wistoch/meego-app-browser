# Copyright (c) 2006-2008 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

__doc__ = """
Configuration for building the net_unittests{,.exe} executable.
"""

Import('env')

env = env.Clone()

env.ApplySConscript([
    '$BASE_DIR/using_base.scons',
    '$BZIP2_DIR/using_bzip2.scons',
    '$CHROME_SRC_DIR/build/using_googleurl.scons',
    '$GTEST_DIR/../using_gtest.scons',
    '$ICU38_DIR/using_icu38.scons',
    '$MODP_B64_DIR/using_modp_b64.scons',
    '$NET_DIR/using_net.scons',
    '$SDCH_DIR/using_sdch.scons',
    '$ZLIB_DIR/using_zlib.scons',
])

if env.Bit('posix'):
  env.SConscript([
      '$LIBEVENT_DIR/using_libevent.scons',
  ], {'env':env})

if env.Bit('windows'):
  env.Prepend(
      CCFLAGS = [
          '/WX',
      ],
  )

input_files = [
    'base/auth_cache_unittest.cc',
    'base/base64_unittest.cc',
    'base/bzip2_filter_unittest.cc',
    'base/client_socket_pool_unittest.cc',
    'base/cookie_monster_unittest.cc',
    'base/cookie_policy_unittest.cc',
    'base/data_url_unittest.cc',
    'base/directory_lister_unittest.cc',
    'base/escape_unittest.cc',
    'base/file_stream_unittest.cc',
    'base/filter_unittest.cc',
    'base/gzip_filter_unittest.cc',
    'base/host_resolver_unittest.cc',
    'base/listen_socket_unittest.cc',
    'base/mime_sniffer_unittest.cc',
    'base/mime_util_unittest.cc',
    'base/net_util_unittest.cc',
    'base/registry_controlled_domain_unittest.cc',
    'base/run_all_unittests.cc',
    'base/ssl_test_util.cc',
    'base/ssl_client_socket_unittest.cc',
    'base/tcp_client_socket_unittest.cc',
    'base/telnet_server_unittest.cc',
    'base/test_completion_callback_unittest.cc',
    'base/x509_certificate_unittest.cc',
    'disk_cache/addr_unittest.cc',
    'disk_cache/backend_unittest.cc',
    'disk_cache/block_files_unittest.cc',
    'disk_cache/disk_cache_test_base.cc',
    'disk_cache/disk_cache_test_util.cc',
    'disk_cache/entry_unittest.cc',
    'disk_cache/mapped_file_unittest.cc',
    'disk_cache/storage_block_unittest.cc',
    'http/http_auth_cache_unittest.cc',
    'http/http_auth_handler_basic_unittest.cc',
    'http/http_auth_handler_digest_unittest.cc',
    'http/http_auth_unittest.cc',
    'http/http_cache_unittest.cc',
    'http/http_chunked_decoder_unittest.cc',
    'http/http_network_layer_unittest.cc',
    'http/http_network_transaction_unittest.cc',
    'http/http_response_headers_unittest.cc',
    'http/http_transaction_unittest.cc',
    'http/http_util_unittest.cc',
    'http/http_vary_data_unittest.cc',
    'proxy/proxy_script_fetcher_unittest.cc',
    'proxy/proxy_service_unittest.cc',
    'url_request/url_request_unittest.cc',
]

if env.Bit('windows'):
  input_files.extend([
      'base/wininet_util_unittest.cc',
      'http/http_transaction_winhttp_unittest.cc',
      'http/winhttp_request_throttle_unittest.cc',
  ])

if env.Bit('linux'):
  # TODO(port):
  to_be_ported_files = [
      'base/sdch_filter_unittest.cc',
      'base/ssl_config_service_unittest.cc',
  ]
  input_files = list(set(input_files) - set(to_be_ported_files))

if env.Bit('mac'):
  input_files.extend([
      '../base/platform_test_mac$OBJSUFFIX',
  ])

  # TODO(port):
  to_be_ported_files = [
      'base/x509_certificate_unittest.cc',
      'base/sdch_filter_unittest.cc',
      'base/ssl_config_service_unittest.cc',
      'url_request/url_request_unittest.cc',
  ]
  input_files = list(set(input_files) - set(to_be_ported_files))

env.ChromeTestProgram('net_unittests', input_files)

env.ChromeMSVSProject('$NET_DIR/build/net_unittests.vcproj',
                dependencies = [
                    '$BASE_DIR/build/base.vcproj',
                    '$BZIP2_DIR/bzip2.vcproj',
                    '$NET_DIR/build/net.vcproj',
                    '$MODP_B64_DIR/modp_b64.vcproj',
                    '$ZLIB_DIR/zlib.vcproj',
                    '$ICU38_DIR/build/icu.vcproj',
                    '$TESTING_DIR/gtest.vcproj',
                    '$GOOGLEURL_DIR/build/googleurl.vcproj',
                    '$SDCH_DIR/sdch.vcproj',
                ],
                guid='{E99DA267-BE90-4F45-88A1-6919DB2C7567}')
