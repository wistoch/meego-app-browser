/*
 * Copyright 2010, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

uniform float4x4 world : WORLD;
uniform float4x4 worldViewProjection : WORLDVIEWPROJECTION;
uniform float3 lightWorldPos;
uniform float4 lightColor;
uniform float clipHeight;
uniform float4x4 viewInverse : VIEWINVERSE;
uniform float4x4 worldInverseTranspose : WORLDINVERSETRANSPOSE;
uniform float4 emissive;
uniform float4 ambient;
sampler2D diffuseSampler;
uniform float4 specular;
sampler2D bumpSampler;
uniform float shininess;

struct InVertex {
  float4 position : POSITION;
  float4 normal : NORMAL;
  float2 diffuseUV : TEXCOORD0;
  float3 tangent : TANGENT;
  float3 binormal : BINORMAL;
};

struct OutVertex {
  float4 position : POSITION;
  float2 diffuseUV : TEXCOORD0;
  float3 tangent : TEXCOORD1;
  float3 binormal : TEXCOORD2;
  float4 worldPosition: TEXCOORD3;
  float3 normal : TEXCOORD4;
};

OutVertex vertexShaderFunction(InVertex input) {
  OutVertex output;
  output.position = mul(input.position, worldViewProjection);
  output.worldPosition = mul(input.position, world);
  output.diffuseUV = input.diffuseUV;
  output.normal = mul(float4(input.normal.xyz,0), worldInverseTranspose).xyz;
  output.binormal = mul(float4(input.binormal,0), worldInverseTranspose).xyz;
  output.tangent = mul(float4(input.tangent,0), worldInverseTranspose).xyz;
  return output;
}

float4 pixelShaderFunction(OutVertex input) : COLOR {
  float4 diffuse = tex2D(diffuseSampler, input.diffuseUV);
  float3x3 tangentToWorld = float3x3(input.tangent,
                                     input.binormal,
                                     input.normal);
  float3 tangentNormal = tex2D(bumpSampler, input.diffuseUV.xy).xyz -
                         float3(0.5, 0.5, 0.5);
  float3 normal = mul(tangentNormal, tangentToWorld);
  normal = normalize(normal);
  float3 surfaceToLight = normalize(lightWorldPos - input.worldPosition);
  float3 surfaceToView = normalize(viewInverse[3] - input.worldPosition);
  float3 halfVector = normalize(surfaceToLight + surfaceToView);
  float4 litR = lit(dot(normal, surfaceToLight),
                    dot(normal, halfVector),
                    shininess);
  float alpha = input.worldPosition.z > clipHeight ? 0 : diffuse.a;
  return float4((emissive + lightColor *
                 (ambient * diffuse +
                  diffuse * litR.y +
                  specular * litR.z)).rgb, alpha);
}

// #o3d VertexShaderEntryPoint vertexShaderFunction
// #o3d PixelShaderEntryPoint pixelShaderFunction
// #o3d MatrixLoadOrder RowMajor
