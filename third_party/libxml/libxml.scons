# Copyright 2008, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#    * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#    * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Import('env')

if env.WantSystemLib('libxml'):
  Return()

env = env.Clone()

env.Prepend(
    CPPPATH = [
        '$ICU38_DIR/public/common',
        '$ICU38_DIR/public/18n',
        '$ZLIB_DIR',
        'DerivedSources',
        'DerivedSources/include',
        'include',
    ],
    CPPDEFINES = [
        'U_STATIC_IMPLEMENTATION',
        'LIBXML_STATIC',
    ],
)

if env.Bit('windows'):
  env.Append(
      CCFLAGS = [
          '/TC',
          '/wd4800',
      ],
  )
elif env.Bit('linux'):
  env.Append(
      CPPDEFINES = [
          '_REENTRANT',
      ],
  )
  if '-Wall' in env['CCFLAGS']:
    # We're not responsible for bad warning hygiene in this third party code.
    env['CCFLAGS'].remove('-Werror')


input_files = [
    'c14n.c',
    'catalog.c',
    'chvalid.c',
    'debugXML.c',
    'dict.c',
    'DOCBparser.c',
    'encoding.c',
    'entities.c',
    'error.c',
    'globals.c',
    'hash.c',
    'HTMLparser.c',
    'HTMLtree.c',
    'legacy.c',
    'list.c',
    'nanoftp.c',
    'nanohttp.c',
    'parser.c',
    'parserInternals.c',
    'pattern.c',
    'relaxng.c',
    'SAX.c',
    'SAX2.c',
    'schematron.c',
    'threads.c',
    'tree.c',
    'uri.c',
    'valid.c',
    'xinclude.c',
    'xlink.c',
    'xmlIO.c',
    'xmlmemory.c',
    'xmlmodule.c',
    'xmlreader.c',
    'xmlregexp.c',
    'xmlsave.c',
    'xmlschemas.c',
    'xmlschemastypes.c',
    'xmlstring.c',
    'xmlunicode.c',
    'xmlwriter.c',
    'xpath.c',
    'xpointer.c',
]

env.ChromeLibrary('libxml', input_files)

env.ChromeMSVSProject('$LIBXML_DIR/build/libxml.vcproj',
                dependencies = [
                    '$LIBXML_DIR/build/libxml_config.vcproj',
                ],
                guid='{F9810DE8-CBC3-4605-A7B1-ECA2D5292FD7}')

env.ChromeMSVSProject('$LIBXML_DIR/build/libxml_config.vcproj',
                guid='{31D88CBF-DC28-47A8-8838-BF81D528EE74}')


if env.Bit('windows'):
  config_files = [
      'config.h',
      'include/libxml/xmlversion.h',
  ]
  for cf in config_files:
    result = env.Command('DerivedSources/' + cf, 'win32/' + cf,
                         Copy('$TARGET', '$SOURCE'))
elif env.Bit('linux'):
  config_files = [
      'config.h',
      'include/libxml/xmlversion.h',
      'xml2-config',
  ]
  for cf in config_files:
    result = env.Command('DerivedSources/' + cf, 'linux/' + cf,
                         Copy('$TARGET', '$SOURCE'))
