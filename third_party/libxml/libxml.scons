# Copyright 2008, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#    * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#    * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Import('env')

if env.WantSystemLib('libxml'):
  Return()

env = env.Clone()

env.Prepend(
    CPPPATH = [
        '$ICU38_DIR/public/common',
        '$ICU38_DIR/public/18n',
        '$ZLIB_DIR',
        'DerivedSources',
        'DerivedSources/include',
        'include',
    ],
    CPPDEFINES = [
        'U_STATIC_IMPLEMENTATION',
        'LIBXML_STATIC',
    ],
)

if env.Bit('windows'):
  env.Append(
      CCFLAGS = [
          '/TC',
          '/wd4800',
      ],
  )
elif env.Bit('linux'):
  env.Append(
      CPPDEFINES = [
          '_REENTRANT',
      ],
  )
  if '-Wall' in env['CCFLAGS']:
    # We're not responsible for bad warning hygiene in this third party code.
    env['CCFLAGS'].remove('-Werror')


input_files = ChromeFileList([
  # TODO(sgk):  violate standard indentation so we don't have to
  # reindent too much when we remove the explicit MSVSFilter() calls
  # in favor of generating the hierarchy to reflect the file system.
  MSVSFilter('include', [
    'include/win32config.h',
    'include/wsockcompat.h',
    MSVSFilter('libxml', [
      'include/libxml/c14n.h',
      'include/libxml/catalog.h',
      'include/libxml/chvalid.h',
      'include/libxml/debugXML.h',
      'include/libxml/dict.h',
      'include/libxml/DOCBparser.h',
      'include/libxml/encoding.h',
      'include/libxml/entities.h',
      'include/libxml/globals.h',
      'include/libxml/hash.h',
      'include/libxml/HTMLparser.h',
      'include/libxml/HTMLtree.h',
      'include/libxml/list.h',
      'include/libxml/nanoftp.h',
      'include/libxml/nanohttp.h',
      'include/libxml/parser.h',
      'include/libxml/parserInternals.h',
      'include/libxml/pattern.h',
      'include/libxml/relaxng.h',
      'include/libxml/SAX.h',
      'include/libxml/SAX2.h',
      'include/libxml/schemasInternals.h',
      'include/libxml/schematron.h',
      'include/libxml/threads.h',
      'include/libxml/tree.h',
      'include/libxml/uri.h',
      'include/libxml/valid.h',
      'include/libxml/xinclude.h',
      'include/libxml/xlink.h',
      'include/libxml/xmlautomata.h',
      'include/libxml/xmlerror.h',
      'include/libxml/xmlexports.h',
      'include/libxml/xmlIO.h',
      'include/libxml/xmlmemory.h',
      'include/libxml/xmlmodule.h',
      'include/libxml/xmlreader.h',
      'include/libxml/xmlregexp.h',
      'include/libxml/xmlsave.h',
      'include/libxml/xmlschemas.h',
      'include/libxml/xmlschemastypes.h',
      'include/libxml/xmlstring.h',
      'include/libxml/xmlunicode.h',
      'include/libxml/xmlversion.h',
      'include/libxml/xmlwriter.h',
      'include/libxml/xpath.h',
      'include/libxml/xpathInternals.h',
      'include/libxml/xpointer.h',
    ]),
  ]),
    'acconfig.h',
    'c14n.c',
    'catalog.c',
    'chvalid.c',
    'config.h',
    'debugXML.c',
    'dict.c',
    'DOCBparser.c',
    'elfgcchack.h',
    'encoding.c',
    'entities.c',
    'error.c',
    'globals.c',
    'hash.c',
    'HTMLparser.c',
    'HTMLtree.c',
    'legacy.c',
    'libxml.h',
    'list.c',
    'nanoftp.c',
    'nanohttp.c',
    'parser.c',
    'parserInternals.c',
    'pattern.c',
    'relaxng.c',
    'SAX.c',
    'SAX2.c',
    'schematron.c',
    'threads.c',
    'tree.c',
    'uri.c',
    'valid.c',
    'xinclude.c',
    'xlink.c',
    'xmlIO.c',
    'xmlmemory.c',
    'xmlmodule.c',
    'xmlreader.c',
    'xmlregexp.c',
    'xmlsave.c',
    'xmlschemas.c',
    'xmlschemastypes.c',
    'xmlstring.c',
    'xmlunicode.c',
    'xmlwriter.c',
    'xpath.c',
    'xpointer.c',
])

env.ChromeLibrary('libxml', input_files)

p = env.ChromeMSVSProject('$LIBXML_DIR/build/libxml.vcproj',
                          dest=('$CHROME_SRC_DIR/third_party/libxml/' +
                                '/build/libxml.vcproj'),
                          guid='{F9810DE8-CBC3-4605-A7B1-ECA2D5292FD7}',
                          keyword='Win32Proj',
                          # TODO(sgk):  when we can intuit the hierarchy
                          # from the built targets.
                          #buildtargets=TODO,
                          files=input_files,
                          tools=[
                              'VCPreBuildEventTool',
                              'VCCustomBuildTool',
                              'VCXMLDataGeneratorTool',
                              'VCWebServiceProxyGeneratorTool',
                              'VCMIDLTool',
                              'VCCLCompilerTool',
                              'VCManagedResourceCompilerTool',
                              'VCResourceCompilerTool',
                              'VCPreLinkEventTool',
                              'VCLibrarianTool',
                              'VCALinkTool',
                              'VCXDCMakeTool',
                              'VCBscMakeTool',
                              'VCFxCopTool',
                              'VCPostBuildEventTool',
                          ],
                          ConfigurationType='4')

p.AddConfig('Debug|Win32',
            InheritedPropertySheets=[
                '$(SolutionDir)../build/debug.vsprops',
                './libxml.vsprops',
            ])

p.AddConfig('Release|Win32',
            InheritedPropertySheets=[
                '$(SolutionDir)../build/release.vsprops',
                './libxml.vsprops',
            ])

if env.Bit('windows'):
  config_files = [
      'config.h',
      'include/libxml/xmlversion.h',
  ]
  for cf in config_files:
    result = env.Command('DerivedSources/' + cf, 'win32/' + cf,
                         Copy('$TARGET', '$SOURCE'))
elif env.Bit('linux'):
  config_files = [
      'config.h',
      'include/libxml/xmlversion.h',
      'xml2-config',
  ]
  for cf in config_files:
    result = env.Command('DerivedSources/' + cf, 'linux/' + cf,
                         Copy('$TARGET', '$SOURCE'))
