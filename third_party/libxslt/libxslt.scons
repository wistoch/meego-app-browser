# Copyright 2008, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#    * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#    * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Import('env')

env = env.Clone()

if env.WantSystemLib('libxslt'):
  Return()

env.Prepend(
    CPPPATH = [
        '$LIBXML_DIR/DerivedSources/include',
        '$LIBXML_DIR/include',
        '$ICU38_DIR/public/common',
        '$ICU38_DIR/public/18n',
        '$ZLIB_DIR',
        'scons',
        '.',
        '../',
    ],
)

env.Append(
    CPPDEFINES = [
        'U_STATIC_IMPLEMENTATION',
        'LIBXML_STATIC',
        'LIBXSLT_STATIC',
    ],
)

if env.Bit('windows'):
  env.Append(
      CCFLAGS = [
          '/TC',
          '/wd4800',
      ],
  )


input_files = [
    'libxslt/attributes.c',
    'libxslt/attrvt.c',
    'libxslt/documents.c',
    'libxslt/extensions.c',
    'libxslt/extra.c',
    'libxslt/functions.c',
    'libxslt/imports.c',
    'libxslt/keys.c',
    'libxslt/namespaces.c',
    'libxslt/numbers.c',
    'libxslt/pattern.c',
    'libxslt/preproc.c',
    'libxslt/security.c',
    'libxslt/templates.c',
    'libxslt/transform.c',
    'libxslt/variables.c',
    'libxslt/xslt.c',
    'libxslt/xsltutils.c',
]

env.ChromeLibrary('libxslt', input_files)

env.ChromeMSVSProject('$LIBXSLT_DIR/build/libxslt.vcproj',
                dependencies = [
                    '$LIBXSLT_DIR/build/libxslt_config.vcproj',
                    '$LIBXML_DIR/build/libxml.vcproj',
                ],
                guid='{FC0E1FD0-5DD7-4041-A1C9-CD3C376E4EED}')

env.ChromeMSVSProject('$LIBXSLT_DIR/build/libxslt_config.vcproj',
                guid='{4BD929D4-494B-4EE8-91F6-FD0277A51D2B}')


if env.Bit('windows'):
  config_files = [
      # The configure.js script must be first in this list; the
      # env.Command() call below executes the first list element.

      'win32/configure.js',
      'win32/Makefile.msvc',

      'config.h.in',
      'configure.in',
      'libexslt.pc.in',
      'libxslt.pc.in',
      'libxslt.spec.in',
      'xslt-config.in',
      'xsltConf.sh.in',

      'libexslt/exsltconfig.h.in',

      'libxslt/xsltconfig.h.in',
      'libxslt/xsltwin32config.h.in',
      'libxslt/win32config.h',
  ]

  copied_sources = []
  for cf in config_files:
    result = env.Command('scons/' + cf, cf, Copy('$TARGET', '$SOURCE'))
    copied_sources.extend(result)

  env.Command(['scons/config.h'],
              copied_sources,
              'cd ${SOURCE.dir} && $CSCRIPT ${SOURCE.file} $CONFIG_OPTIONS',
              CONFIG_OPTIONS='compiler=msvc')
elif env.Bit('linux'):
  config_files = [
      'config.h',
      'xslt-config',
      'libexslt/exsltconfig.h',
      'libxslt/xsltconfig.h',
      'libxslt/xsltwin32config.h',
  ]
  for cf in config_files:
    result = env.Command('scons/' + cf, 'linux/' + cf,
                         Copy('$TARGET', '$SOURCE'))

