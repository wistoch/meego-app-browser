# Copyright (c) 2006-2008 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

__doc__ = """
Configuration for building zlib.lib / libzlib.a.
"""

Import('env')

if env.WantSystemLib('zlib'):
  env.Append(ZLIB_LIB = ['z'])
  Return()

env = env.Clone()

env.Append(
    CPPPATH = ['$ZLIB_DIR'],
    ZLIB_LIB = ['zlib'],
)

if env.Bit('windows'):
  env.Append(
      CCFLAGS = [
          '/TC',
          '/wd4800',
      ],
  )

minizip_filter = MSVSFilter('minizip', [
    'contrib/minizip/ioapi.c',
    'contrib/minizip/ioapi.h',
    'contrib/minizip/iowin32.c',
    'contrib/minizip/iowin32.h',
    'contrib/minizip/unzip.c',
    'contrib/minizip/unzip.h'
])

input_files = ChromeFileList([
    minizip_filter,

    'adler32.c',
    'compress.c',
    'crc32.c',
    'crc32.h',
    'deflate.c',
    'deflate.h',
    'gzio.c',
    'infback.c',
    'inffast.c',
    'inffast.h',
    'inffixed.h',
    'inflate.c',
    'inflate.h',
    'inftrees.c',
    'inftrees.h',
    'mozzconf.h',
    'trees.c',
    'trees.h',
    'uncompr.c',
    'zconf.h',
    'zlib.h',
    'zutil.c',
    'zutil.h',
])

if not env.Bit('windows'):
  input_files.Remove(
      'contrib/minizip/iowin32.c',
      'contrib/minizip/iowin32.h',
  )

if env.Bit('posix'):
  env.Append(
      CCFLAGS = [
          '-Wno-parentheses',
          '-Wno-unused-variable',
      ],
  )

env.ChromeLibrary('zlib', input_files)

p = env.ChromeMSVSProject('zlib.vcproj',
                          dest='$CHROME_SRC_DIR/third_party/zlib/zlib.vcproj',
                          guid='{8423AF0D-4B88-4EBF-94E1-E4D00D00E21C}',
                          keyword='Win32Proj',
                          files=input_files,
                          relative_path_prefix=r'./',
                          tools = [
                              'VCLibrarianTool',
                              'VCCLCompilerTool',
                          ])

p.AddConfig('Debug|Win32',
            ConfigurationType = '4',
            InheritedPropertySheets = [
                '$(SolutionDir)../build/common.vsprops',
                '$(SolutionDir)../build/debug.vsprops',
                '$(SolutionDir)../build/external_code.vsprops',
                './zlib.vsprops'
            ])

p.AddConfig('Release|Win32',
            ConfigurationType = '4',
            InheritedPropertySheets = [
                '$(SolutionDir)../build/common.vsprops',
                '$(SolutionDir)../build/release.vsprops',
                '$(SolutionDir)../build/external_code.vsprops',
                './zlib.vsprops'
            ])
