# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2006-2008 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'chromium' bot. It must
# be installed as 'master.cfg' in your buildmaster's base directory
# (although the filename can be changed with the --basedir option to
# 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

# This file follows this naming convention:
# Factories: f_chromium_[dbg/rel]_[type]
# Builders:  b_chromium_[dbg/rel]_[os]_[type]
# BuildDir:  chromium-[dbg/rel]-[os]-[type]
#
# os = xp/vista/linux/mac
# type = perf/tests/full/jsc/webkit_latest/purify

from buildbot import locks
from buildbot.steps import shell

import os

# These modules come from scripts/master, which must be in the PYTHONPATH.
import master_utils
import chromium_step
import chromium_config as config
# These modules come from scripts/common, which must be in the PYTHONPATH.
import chromium_utils


# The default behavior of this master.cfg file is to run our production
# buildbot (of course).  Setting the following variable to False will
# suppress initialization of production defaults.
PRODUCTION_BUILDBOT_MASTER = True

if PRODUCTION_BUILDBOT_MASTER:
  # Production defaults
  MASTER_HOST = config.Master.master_host
  TRUNK_URL = config.Master.trunk_url
  BRANCH_URL = config.Master.branch_url
  TRUNK_INTERNAL_URL = config.Master.trunk_internal_url
  PROJECT_URL = config.Master.project_url
  SVN_BINARY = config.Master.svn_binary_path
  WEB_STATUS = True
  MAIL_NOTIFIER = False
  IRC_STATUS_BOT = True
  PB_LISTENER = True
else:
  MASTER_HOST = config.Master.master_host_experimental
  TRUNK_URL = config.Master.trunk_url
  BRANCH_URL = config.Master.branch_url
  TRUNK_INTERNAL_URL = config.Master.trunk_internal_url
  SVN_BINARY = config.Master.svn_binary_path_experimental
  WEB_STATUS = True
  MAIL_NOTIFIER = False
  IRC_STATUS_BOT = False
  PB_LISTENER = False

MASTER_PORT = config.Master.master_port

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = config.Master.slave_port


####### BUILDSLAVES

# the 'bots' list defines the set of allowable buildslaves. Each element is a
# tuple of bot-name and bot-password. These correspond to values given to the
# buildslave's mktap invocation.
bot_password = config.Master.GetBotPassword()
print bot_password
if PRODUCTION_BUILDBOT_MASTER:
  c['bots'] = [('hae162', bot_password),
               ('hae163', bot_password),
               ('hae164', bot_password),
               ('hae165', bot_password),
               ('hae166', bot_password),
               ('hae167', bot_password),
               ('hae168', bot_password),
               ('hae169', bot_password),
               ('hae170', bot_password),
               ('hae171', bot_password),
               ('hae172', bot_password),
               ('hae173', bot_password),
               ('hae174', bot_password),
               ('hae175', bot_password),
               ('hae176', bot_password),
               ('hae177', bot_password),
               ('hae178', bot_password),
               ('hae179', bot_password),
               ('hae180', bot_password),
               ('hae181', bot_password),
               ('hae182', bot_password),
               ('hae183', bot_password),
               ('hae184', bot_password),
               ('hae185', bot_password),
               ('hae186', bot_password),
               ('hae187', bot_password),
               ('hae188', bot_password),
               ('internal-1', bot_password),
               ('internal-2', bot_password),
               ('internal-3', bot_password),
               ('internal-4', bot_password),
               ('internal-5', bot_password),
               ('internal-6', bot_password),
               ('internal-7', bot_password),
               ('chromebuild-linux', bot_password)]
else:
  c['bots'] = [('chromium-experimental', bot_password)]


####### CHANGESOURCES

# the 'sources' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def ChromeTreeFileSplitter(path):
  """split_file for the 'src' project in the trunk."""

  # List of projects we are interested in. The project names must exactly
  # match paths in the Subversion repository, relative to the 'path' URL
  # argument. master_utils.SplitPath() will use them as branch names to
  # kick off the Schedulers for different projects.
  projects = ['src']
  return master_utils.SplitPath(projects, path)

def MergeFileSplitter(path):
  """split_file for webkit merge branch changes."""
  projects = ['chrome_webkit_merge_branch']
  return master_utils.SplitPath(projects, path)


import chromium_changes
# Polls TRUNK_URL for changes
trunk_poller = chromium_changes.SVNPoller(svnurl = TRUNK_URL,
                                          split_file=ChromeTreeFileSplitter,
                                          pollinterval=10,
                                          svnbin=SVN_BINARY)

# Polls BRANCH_URL for changes and recognizes 'chrome_webkit_merge_branch'
# changes.
merge_poller = chromium_changes.SVNPoller(svnurl = BRANCH_URL,
                                          split_file=MergeFileSplitter,
                                          pollinterval=30,
                                          svnbin=SVN_BINARY)

c['sources'] = [trunk_poller, merge_poller]


####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import Dependent
from buildbot.scheduler import Nightly
from buildbot.scheduler import Scheduler

# Main scheduler for all changes in trunk.
s_chromium = Scheduler(name='chromium',
                       branch='src',
                       treeStableTimer=60,
                       builderNames=['Chromium XP',
                                     'Chromium XP (jsc)',
                                     'XP Tests (purify)',
                                     'Webkit (purify)',
                                     'Modules XP',
                                     'Modules XP (dbg)',
                                     'Modules XP (purify)',
                                     'Modules Vista',
                                     'Modules Vista (dbg)',
                                     'Modules Linux (dbg)',
                                     'Modules Mac',
                                     'Modules Mac (dbg)'])

# Scheduler to trigger slaves that depend on the release build.
s_chromium_rel_builder = Scheduler(name='chromium_rel_builder',
                                   branch='src',
                                   treeStableTimer=60,
                                   builderNames=['Chromium Builder'])

s_chromium_rel_dependent = Dependent('chromium_rel_dependent',
                                     s_chromium_rel_builder,
                                     ['XP Tests',
                                      'Vista Tests',
                                      'XP Perf',
                                      'Vista Perf',
                                     ])


# Scheduler to trigger slaves that depend on the debug build.
s_chromium_dbg_builder = Scheduler(name='chromium_dbg_builder',
                                   branch='src',
                                   treeStableTimer=60,
                                   builderNames=['Chromium Builder (dbg)'])

s_chromium_dbg_dependent = Dependent('chromium_dbg_dependent',
                                     s_chromium_dbg_builder,
                                     ['XP Tests (dbg)',
                                      'Vista Tests (dbg)',
                                      'Interactive Tests (dbg)',
                                      'XP Perf (dbg)',
                                      'Vista Perf (dbg)'
                                     ])


# Scheduler to trigger slaves that depend on the webkit release build.
s_webkit_rel_builder = Scheduler(name='webkit_rel_builder',
                                 branch='src',
                                 treeStableTimer=60,
                                 builderNames=['Webkit Builder'])

s_webkit_rel_builder_dependent = Dependent('webkit_release_dependent',
                                           s_webkit_rel_builder,
                                           ['Webkit'])

# Scheduler to trigger slaves that depend on the webkit debug build.
s_webkit_dbg_builder = Scheduler(name='webkit_dbg_builder',
                                 branch='src',
                                 treeStableTimer=60,
                                 builderNames=['Webkit Builder (dbg)'])

s_webkit_dbg_builder_dependent = Dependent('webkit_dbg_dependent',
                                           s_webkit_dbg_builder,
                                           ['Webkit (dbg)'])

# Sechduler to trigger slaves that depend on the webkit release build with the
# latest version of v8.
s_webkit_rel_builder_v8 = Scheduler(name='webkit_rel_builder_v8',
                                    branch='src',
                                    treeStableTimer=60,
                                    builderNames=['Webkit Builder (V8-Latest)'])

s_webkit_rel_builder_dependent_v8 = Dependent('webkit_rel_dependent_v8',
                                              s_webkit_rel_builder_v8,
                                              ['Webkit (V8-Latest)'])

# Special weekly scheduler for purify_layout. Starts every friday at 11pm.
s_webkit_rel_purify_layout = Nightly(name='webkit_rel_purify_layout',
                                     dayOfWeek=4,
                                     hour=23,
                                     builderNames=['Webkit (purify layout)'])

# Webkit Merge scheduler
s_webkit_rel_merge = Scheduler(name='webkit_rel_merge',
                                    branch='chrome_webkit_merge_branch',
                                    treeStableTimer=60,
                                    builderNames=['Webkit (merge)',
                                                  'Chromium XP (merge)'])

# Experimental Scheduler
s_chromium_experimental = Scheduler(name='experimental',
                                    branch='src',
                                    treeStableTimer=60,
                                    builderNames=['Chromium Experimental'])

if PRODUCTION_BUILDBOT_MASTER:
  c['schedulers'] = [s_chromium,
                     s_chromium_rel_builder,
                     s_chromium_rel_dependent,
                     s_chromium_dbg_builder,
                     s_chromium_dbg_dependent,
                     s_webkit_rel_builder,
                     s_webkit_rel_builder_dependent,
                     s_webkit_dbg_builder,
                     s_webkit_dbg_builder_dependent,
                     s_webkit_rel_builder_v8,
                     s_webkit_rel_builder_dependent_v8,
                     s_webkit_rel_merge,
                     s_webkit_rel_purify_layout]
else:
  c['schedulers'] = [s_chromium_experimental]

####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

m = master_utils.MasterFactory('src/chrome',
                               TRUNK_URL + '/src',
                               TRUNK_INTERNAL_URL + '/src-internal')

m_webkit = master_utils.MasterFactory('src/webkit',
                                       TRUNK_URL + '/src',
                                       TRUNK_INTERNAL_URL + '/src-internal')

m_linux = master_utils.MasterFactory('src/chrome',
                                     TRUNK_URL + '/src',
                                     TRUNK_INTERNAL_URL + '/src-internal',
                                     target_platform='linux2')

m_mac = master_utils.MasterFactory('src/chrome',
                                   TRUNK_URL + '/src',
                                   TRUNK_INTERNAL_URL + '/src-internal',
                                   target_platform='darwin')

# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.

# BuilderTesters using a custom build configuration.
f_chromium_rel_full = m.NewBuildFactory(identifier='chromium-rel-xp',
                        archive_build=True,
                        run_crash_handler=True,
                        check_deps=True,
                        tests=['selenium', 'unit', 'ui', 'test_shell',
                               'page_cycler', 'page_cycler_http', 'startup',
                               'tab_switching', 'memory'])

f_chromium_rel_jsc = m.NewBuildFactory(identifier='chromium-rel-jsc',
                       solution='chrome_kjs.sln',
                       # We don't archive because the machine is not in bighouse
                       # yet and can't access the drive.
                       #archive_build=True,
                       with_pageheap=True,
                       show_perf_results=True,
                       perf_id='chromium-rel-jsc',
                       run_crash_handler=True,
                       tests=['selenium', 'unit', 'ui', 'test_shell',
                              'page_cycler', 'startup', 'tab_switching'])

f_chromium_rel_merge = m.NewBuildFactory(identifier='chromium-rel-merge',
                         svnurl=config.Master.merge_branch_url,
                         run_crash_handler=True,
                         tests=['selenium', 'unit', 'ui', 'test_shell',
                                'page_cycler', 'startup', 'tab_switching'])


f_chromium_rel_purify = m.NewBuildFactory(identifier='chromium-rel-purify',
                          mode='purify',
                          run_crash_handler=True,
                          tests=['purify_chrome'])

f_chromium_rel_builder = m.NewBuildFactory(identifier='chromium-rel',
                                           slave_type='Builder',
                                           check_deps=True,
                                           tests=[])

f_chromium_dbg_builder = m.NewBuildFactory(identifier='chromium-dbg',
                                           target='Debug',
                                           slave_type='Builder',
                                           check_deps=True,
                                           tests=[])

f_chromium_rel_tests = m.NewBuildFactory(identifier='chromium-rel',
                                         slave_type='Tester',
                                         run_crash_handler=True,
                                         tests=['unit', 'ui'])

f_chromium_dbg_tests = m.NewBuildFactory(identifier='chromium-dbg',
                                         target='Debug',
                                         slave_type='Tester',
                                         run_crash_handler=True,
                                         tests=['unit', 'ui'])

f_chromium_dbg_interactive_tests = m.NewBuildFactory(identifier='chromium-dbg',
                                                     target='Debug',
                                                     # this machine should just get a build from
                                                     # the builder, but it's too slow since the
                                                     # machine in not in bighouse 
                                                     # slave_type='Tester',
                                                     run_crash_handler=True,
                                                     tests=['interactive_ui'])

f_chromium_dbg_perf = m.NewBuildFactory(identifier='chromium-dbg',
                                        target='Debug',
                                        slave_type='Tester',
                                        run_crash_handler=True,
                                        tests=['plugin', 'page_cycler',
                                               'startup', 'tab_switching'])

f_chromium_dbg_perf_vista = m.NewBuildFactory(identifier='chromium-dbg',
                                              target='Debug',
                                              slave_type='Tester',
                                              run_crash_handler=True,
                                              tests=['page_cycler', 'startup',
                                                     'tab_switching'])

f_chromium_rel_perf_xp_dual = m.NewBuildFactory(identifier='chromium-rel',
                                slave_type='Tester',
                                show_perf_results=True,
                                perf_id='chromium-rel-xp-dual',
                                run_crash_handler=True,
                                tests=['page_cycler', 'startup',
                                       'tab_switching', 'memory'])

f_chromium_rel_perf_vista_dual = m.NewBuildFactory(identifier='chromium-rel',
                                   #slave_type='Tester',
                                   show_perf_results=True,
                                   perf_id='chromium-rel-vista-dual',
                                   run_crash_handler=True,
                                   tests=['page_cycler', 'startup',
                                          'tab_switching', 'memory'])

f_webkit_rel_builder = m_webkit.NewBuildFactory('webkit-rel',
                                                slave_type='Builder',
                                                tests=[])

f_webkit_dbg_builder = m_webkit.NewBuildFactory('webkit-dbg',
                                                target='Debug',
                                                slave_type='Builder',
                                                tests=[])

f_webkit_rel = m_webkit.NewBuildFactory('webkit-rel',
                                        slave_type='Tester',
                                        tests=['test_shell', 'webkit'])

f_webkit_dbg = m_webkit.NewBuildFactory('webkit-dbg',
                                        target='Debug',
                                        slave_type='Tester',
                                        tests=['test_shell', 'webkit'])

f_webkit_rel_builder_v8 = m_webkit.NewBuildFactory(
    'webkit-rel-v8',
    slave_type='Builder',
    tests=[],
    gclient_custom_deps=[m_webkit.CUSTOM_DEPS_V8_LATEST])

f_webkit_rel_v8 = m_webkit.NewBuildFactory(
    'webkit-rel-v8',
     slave_type='Tester',
     tests=['test_shell', 'webkit'],
     gclient_custom_deps=[m_webkit.CUSTOM_DEPS_V8_LATEST])

f_webkit_rel_purify = m_webkit.NewBuildFactory('webkit-rel-purify',
                                               mode='purify',
                                               tests=['purify_webkit'])

f_webkit_rel_purify_layout = m_webkit.NewBuildFactory('webkit-rel-purify',
                                                      mode='purify',
                                                      tests=['purify_layout'])

f_webkit_rel_merge = m_webkit.NewBuildFactory('webkit-rel-merge',
                                              svnurl=config.Master.merge_branch_url,
                                              tests=['test_shell', 'webkit'])

f_sub_rel = m.NewSubmoduleFactory(identifier='sub-rel')
f_sub_dbg = m.NewSubmoduleFactory(identifier='sub-deb', target='Debug')
f_sub_rel_purify = m.NewSubmoduleFactory(identifier='sub-rel-purify',
                                         mode='purify')

f_sub_dbg_linux = m_linux.NewBuildFactory(identifier='sub-dbg-linux',
                                          target='Hammer',
                                          tests=['base', 'net', 'googleurl',
                                                 'unit'],
                                          build_dir='src/chrome',
                                          run_crash_handler=False,
                                          options=['--build-tool=scons',
                                                   '--', 'Hammer'])

f_sub_rel_mac = m_mac.NewBuildFactory(identifier='sub-rel-mac',
                                      target='Release',
                                      tests=['base', 'net', 'googleurl',
                                             'unit'],
                                      build_dir='src/build',
                                      run_crash_handler=False,
                                      options=['--build-tool=xcode', '--',
                                               '-project', 'all.xcodeproj'])

f_sub_dbg_mac = m_mac.NewBuildFactory(identifier='sub-dbg-mac',
                                      target='Debug',
                                      tests=['base', 'net', 'googleurl',
                                             'unit'],
                                      build_dir='src/build',
                                      run_crash_handler=False,
                                      options=['--build-tool=xcode', '--',
                                               '-project', 'all.xcodeproj'])

f_chromium_experimental = m.NewBuildFactory(identifier='chromium-experimental',
                                            tests=[])

internal_4_lock = locks.SlaveLock('internal4')
internal_5_lock = locks.SlaveLock('internal5')

b_chromium_rel_xp_full = {'name': 'Chromium XP',
  'slavename': 'hae178',
  'builddir': 'chromium-rel-xp',
  'factory': f_chromium_rel_full,
}

b_chromium_dbg_builder = {'name': 'Chromium Builder (dbg)',
  'slavename': 'hae176',
  'builddir': 'chromium-dbg-builder',
  'factory': f_chromium_dbg_builder,
}

b_chromium_rel_builder = {'name': 'Chromium Builder',
  'slavename': 'hae177',
  'builddir': 'chromium-rel-builder',
  'factory': f_chromium_rel_builder,
}

b_chromium_rel_xp_tests = {'name': 'XP Tests',
  'slavename': 'hae175',
  'builddir': 'chromium-rel-xp-tests',
  'factory': f_chromium_rel_tests,
}

b_chromium_dbg_xp_tests = {'name': 'XP Tests (dbg)',
  'slavename': 'hae174',
  'builddir': 'chromium-dbg-xp-tests',
  'factory': f_chromium_dbg_tests,
}

b_chromium_dbg_xp_interactive_tests = {'name': 'Interactive Tests (dbg)',
  'slavename': 'internal-1',
  'builddir': 'chromium-dbg-xp-interactive',
  'factory': f_chromium_dbg_interactive_tests,
}

b_chromium_rel_vista_tests = {'name': 'Vista Tests',
  'slavename': 'hae173',
  'builddir': 'chromium-rel-vista-tests',
  'factory': f_chromium_rel_tests,
}

b_chromium_dbg_vista_tests = {'name': 'Vista Tests (dbg)',
  'slavename': 'hae172',
  'builddir': 'chromium-dbg-vista-tests',
  'factory': f_chromium_dbg_tests,
}

b_chromium_dbg_xp_perf = {'name': 'XP Perf (dbg)',
  'slavename': 'hae168',
  'builddir': 'chromium-dbg-xp-perf',
  'factory': f_chromium_dbg_perf,
}

b_chromium_dbg_vista_perf = {'name': 'Vista Perf (dbg)',
  'slavename': 'hae167',
  'builddir': 'chromium-dbg-vista-perf',
  'factory': f_chromium_dbg_perf_vista,
}

b_chromium_rel_xp_perf_dual = {'name': 'XP Perf',
  'slavename': 'internal-6',
  'builddir': 'chromium-rel-xp-perf-dual',
  'factory': f_chromium_rel_perf_xp_dual,
}

b_chromium_rel_vista_perf_dual = {'name': 'Vista Perf',
  'slavename': 'internal-7',
  'builddir': 'chromium-rel-vista-perf-dual',
  'factory': f_chromium_rel_perf_vista_dual,
}

b_chromium_rel_xp_purify = {'name': 'XP Tests (purify)',
  'slavename': 'internal-3',
  'builddir': 'pc',
  'factory': f_chromium_rel_purify,
}

b_chromium_rel_xp_jsc = {'name': 'Chromium XP (jsc)',
  'slavename': 'internal-2',
  'builddir': 'chromium-rel-xp-jsc',
  'factory': f_chromium_rel_jsc,
}

b_chromium_rel_xp_merge = {'name': 'Chromium XP (merge)',
  'slavename': 'internal-5',
  'builddir': 'chromium-rel-xp-merge',
  'factory': f_chromium_rel_merge,
  'locks': [internal_5_lock],
}

b_webkit_rel_builder = {'name': 'Webkit Builder',
  'slavename': 'hae184',
  'builddir': 'webkit-rel-builder',
  'factory': f_webkit_rel_builder,
}

b_webkit_dbg_builder = {'name': 'Webkit Builder (dbg)',
  'slavename': 'hae183',
  'builddir': 'webkit-dbg-builder',
  'factory': f_webkit_dbg_builder,
}

b_webkit_rel_builder_v8 = {'name': 'Webkit Builder (V8-Latest)',
  'slavename': 'hae182',
  'builddir': 'webkit-rel-builder-v8',
  'factory': f_webkit_rel_builder_v8,
}

b_webkit_rel = {'name': 'Webkit',
  'slavename': 'hae181',
  'builddir': 'webkit-rel',
  'factory': f_webkit_rel,
}

b_webkit_dbg = {'name': 'Webkit (dbg)',
  'slavename': 'hae180',
  'builddir': 'webkit-dbg',
  'factory': f_webkit_dbg,
}

b_webkit_rel_v8 = {'name': 'Webkit (V8-Latest)',
  'slavename': 'hae179',
  'builddir': 'webkit-rel-v8',
  'factory': f_webkit_rel_v8,
}

b_webkit_rel_purify = {'name': 'Webkit (purify)',
  'slavename': 'internal-4',
  'builddir': 'pw',
  'factory': f_webkit_rel_purify,
  'locks': [internal_4_lock],
}

b_webkit_rel_purify_layout = {'name': 'Webkit (purify layout)',
  'slavename': 'internal-4',
  'builddir': 'pl',
  'factory': f_webkit_rel_purify_layout,
  'locks': [internal_4_lock],
}

b_webkit_rel_merge = {'name': 'Webkit (merge)',
  'slavename': 'internal-5',
  'builddir': 'webkit-rel-merge',
  'factory': f_webkit_rel_merge,
  'locks': [internal_5_lock],
}

b_sub_dbg_xp = {'name': 'Modules XP (dbg)',
  'slavename': 'hae187',
  'builddir': 'sub-dbg-xp',
  'factory': f_sub_dbg,
}

b_sub_rel_xp = {'name': 'Modules XP',
  'slavename': 'hae188',
  'builddir': 'sub-rel-xp',
  'factory': f_sub_rel,
}

b_sub_rel_xp_purify = {'name': 'Modules XP (purify)',
  'slavename': 'internal-4',
  'builddir': 'ps',
  'factory': f_sub_rel_purify,
  'locks': [internal_4_lock],
}

b_sub_dbg_vista = {'name': 'Modules Vista (dbg)',
  'slavename': 'hae185',
  'builddir': 'sub-dbg-vista',
  'factory': f_sub_dbg,
}

b_sub_rel_vista = {'name': 'Modules Vista',
  'slavename': 'hae186',
  'builddir': 'sub-rel-vista',
  'factory': f_sub_rel,
}

b_chromium_experimental = {'name': 'Chromium Experimental',
  'slavename': 'chromium-experimental',
  'builddir': 'chromium-experimental',
  'factory': f_chromium_experimental,
}

b_sub_dbg_linux = {'name': 'Modules Linux (dbg)',
  'slavename': 'chromebuild-linux',
  'builddir': 'sub-dbg-linux',
  'factory': f_sub_dbg_linux,
}

b_sub_rel_mac = {'name': 'Modules Mac',
  'slavename': 'hae163',
  'builddir': 'sub-rel-mac',
  'factory': f_sub_rel_mac,
}

b_sub_dbg_mac = {'name': 'Modules Mac (dbg)',
  'slavename': 'hae165',
  'builddir': 'sub-dbg-mac',
  'factory': f_sub_dbg_mac,
}

if PRODUCTION_BUILDBOT_MASTER:
  c['builders'] = [b_chromium_rel_xp_full,
                   b_chromium_rel_builder,
                   b_chromium_dbg_builder,
                   b_chromium_rel_xp_tests,
                   b_chromium_dbg_xp_tests,
                   b_chromium_rel_xp_purify,
                   b_chromium_rel_vista_tests,
                   b_chromium_dbg_vista_tests,
                   b_chromium_dbg_xp_interactive_tests,
                   b_chromium_rel_xp_perf_dual,
                   b_chromium_dbg_xp_perf,
                   b_chromium_rel_vista_perf_dual,
                   b_chromium_dbg_vista_perf,
                   b_chromium_rel_xp_jsc,
                   b_chromium_rel_xp_merge,
                   b_webkit_rel_builder,
                   b_webkit_rel_builder_v8,
                   b_webkit_dbg_builder,
                   b_webkit_rel,
                   b_webkit_rel_v8,
                   b_webkit_dbg,
                   b_webkit_rel_purify,
                   b_webkit_rel_purify_layout,
                   b_webkit_rel_merge,
                   b_sub_rel_xp,
                   b_sub_dbg_xp,
                   b_sub_rel_xp_purify,
                   b_sub_rel_vista,
                   b_sub_dbg_vista,
                   b_sub_dbg_linux,
                   b_sub_rel_mac,
                   b_sub_dbg_mac]
else:
  c['builders'] = [b_chromium_experimental]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

if WEB_STATUS:
  #from buildbot.status.html import WebStatus
  from chromium_status import WebStatus
  c['status'].append(WebStatus(MASTER_PORT, allowForce=True))
  c['status'].append(WebStatus(8014, allowForce=False))

if MAIL_NOTIFIER:
  from buildbot.status import mail
  c['status'].append(mail.MailNotifier(
      fromaddr=config.Master.notifications_from, mode='problem'))

if IRC_STATUS_BOT:
  from buildbot.status import words
  # Patch our topic-observing bot in on top of the IRC factory.
  from chromium_status import IrcStatusChatterBot
  words.IrcStatusFactory.protocol = IrcStatusChatterBot
  c['status'].append(words.IRC(host=config.Master.irc_host,
                               nick=config.Master.irc_nickname,
                               channels=config.Master.irc_channels))

if PB_LISTENER:
  from buildbot.status import client
  c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = 'debugpassword'

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole('tcp:9999:interface=127.0.0.1',
#                                       'admin', 'password')


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = config.Master.project_name
c['projectURL'] = config.Master.project_url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = config.Master.buildbot_url
