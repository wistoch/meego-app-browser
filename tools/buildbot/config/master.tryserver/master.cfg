# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2006-2008 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'chromium' bot. It must
# be installed as 'master.cfg' in your buildmaster's base directory
# (although the filename can be changed with the --basedir option to
# 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

from buildbot import locks
from buildbot.buildslave import BuildSlave
from buildbot.changes.pb import PBChangeSource
from buildbot.steps import shell
import os

# These modules come from scripts/master, which must be in the PYTHONPATH.
import chromium_config as config
import chromium_step
import chromium_utils
import factory_commands
import master_utils
from try_job import TryJob



# The default behavior of this master.cfg file is to run our production
# buildbot (of course).  Setting the following variable to False will
# suppress initialization of production defaults.
PRODUCTION_BUILDBOT_MASTER = True

if PRODUCTION_BUILDBOT_MASTER:
  # Production defaults
  MASTER_HOST = 'maruel-ub.i'
  TRUNK_URL = config.Master.trunk_url
  TRUNK_INTERNAL_URL = config.Master.trunk_internal_url
  PROJECT_URL = config.Master.project_url
  SVN_BINARY = config.Master.svn_binary_path
  WEB_STATUS = True
  MAIL_NOTIFIER = True
  IRC_STATUS_BOT = False
  PB_LISTENER = True
else:
  MASTER_HOST = config.Master.master_host_experimental
  TRUNK_URL = config.Master.trunk_url
  TRUNK_INTERNAL_URL = config.Master.trunk_internal_url
  SVN_BINARY = config.Master.svn_binary_path_experimental
  WEB_STATUS = True
  MAIL_NOTIFIER = False
  IRC_STATUS_BOT = False
  PB_LISTENER = False

MASTER_PORT = config.Master.master_port


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = config.Master.slave_port


####### BUILDSLAVES

# the 'bots' list defines the set of allowable buildslaves. Each element is a
# tuple of bot-name and bot-password. These correspond to values given to the
# buildslave's mktap invocation.
c['slaves'] = []
c['builders'] = []


####### CHANGESOURCES

c['change_source'] = [ PBChangeSource() ]


####### BUILDERS

# FACTORIES

m_win = master_utils.MasterFactory('src/chrome',
                                   TRUNK_URL + '/src',
                                   TRUNK_INTERNAL_URL + '/src-internal',
                                   target_platform='win32')

m_win_webkit = master_utils.MasterFactory('src/webkit',
                                          TRUNK_URL + '/src',
                                          TRUNK_INTERNAL_URL + '/src-internal',
                                          target_platform='win32')

m_linux = master_utils.MasterFactory('src/chrome',
                                     TRUNK_URL + '/src',
                                     TRUNK_INTERNAL_URL + '/src-internal',
                                     target_platform='linux2')

m_mac = master_utils.MasterFactory('src/chrome',
                                   TRUNK_URL + '/src',
                                   TRUNK_INTERNAL_URL + '/src-internal',
                                   target_platform='darwin')

def CreateBot(os, prefix='try ', postfix=None, slave_name=None, slave_dir=None,
              password=config.Master.GetBotPassword(), bot_name=None,
              index=None, builder_identifier=None, target=None, webkit=False,
              tests=['unit', 'ui', 'net', 'base'],
              options=None, mode=None, solution=None, svnurl=None,
              perf_id=None, register_slave=True, timeout=1200, locks=None):
  if os not in ('win32', 'win64', 'linux', 'mac'):
    raise Exception(os + ' is not an known os type')
  if not bot_name:
    bot_name = prefix + os
    if postfix:
      bot_name += ' ' + postfix
    if target in ('Hammer', 'Debug'):
      bot_name += ' dbg'
    if target == 'Release':
      bot_name += ' rel'
    if index:
      bot_name += ' ' + str(index)
  if not slave_name:
    slave_name = bot_name.replace(' ', '-')
  if not builder_identifier:
    builder_identifier = slave_name
  if not slave_dir:
    slave_dir = bot_name.replace(' ', '-')
  multi_config = isinstance(target, (list, tuple))
  if multi_config:
    first_target = target[0]
  else:
    first_target = target

  run_crash_handler=False
  build_dir = None
  if os in ('win32', 'win64'):
    if webkit:
      factory = m_win_webkit
    else:
      factory = m_win
      run_crash_handler = True
  elif os == 'linux':
    factory = m_linux
    if not options:
      options=['--build-tool=scons', '--', 'Hammer']
  elif os == 'mac':
    factory = m_mac
    build_dir = 'src/build'
    if not options:
      options=['--build-tool=xcode', '--', '-project', 'all.xcodeproj']
  builder_factory = factory.NewBuildFactory(
      identifier=builder_identifier, slave_type='Trybot', target=first_target,
      run_crash_handler=run_crash_handler, tests=tests, options=options,
      mode=mode, solution=solution, svnurl=svnurl, perf_id=perf_id,
      compile_timeout=timeout, build_dir=build_dir)
  if multi_config:
    # Do a release compilation to trap release-only compilation failure.
    factory_cmd_obj = factory_commands.FactoryCommands(
        builder_factory, builder_identifier, target[1], factory._build_dir,
        factory._target_platform)
    factory_cmd_obj.AddCompileStep(factory._solution, timeout=timeout)
  # TODO(maruel):  if mode == 'official': archive the build somewhere. Probably
  # always archive the build?
  # TODO(maruel):  Add a revert step here to accelerate the next build?
  # TODO(maruel):  Preemptively recompile clean to accelerate next build?
  builder = {
    'name': bot_name,
    'slavename': slave_name,
    'builddir': slave_dir,
    'factory': builder_factory,
  }
  if locks:
    builder['locks'] = [locks]
  c['builders'].append(builder)
  if register_slave:
    c['slaves'].append(BuildSlave(builder['slavename'], password))


# Try queues.
pools = [[], [], []]
number_win32 = 13
number_linux_dbg = 2
number_mac_dbg = 2
win32_locks = [None]
win_multi_locks = [None]


# Linux bots
for index in range(1, number_linux_dbg + 1):
  CreateBot(index=index, os='linux', target='Hammer',
            tests=['base', 'net', 'googleurl', 'unit'])
  pools[1].append('try linux dbg %d' % index)


# Mac bots
for index in range(1, number_mac_dbg + 1):
  CreateBot(index=index, os='mac', target='Debug',
            tests=['base', 'net', 'googleurl'])
  pools[2].append('try mac dbg %d' % index)


# Windows bots
for index in range(1, number_win32 + 1):
  win32_locks.append(locks.SlaveLock('try-win32-%d' % index))
  CreateBot(index=index, target=['Debug', 'Release'], os='win32',
            locks=win32_locks[index])
  pools[0].append('try win32 %d' % index)

CreateBot(index=1, target='Release', os='win32',
          tests=['page_cycler', 'startup', 'tab_switching', 'memory'],
          postfix='perf', slave_name='try-win32-4',
          register_slave=False, locks=win32_locks[4])

CreateBot(index=1, target='Release', os='win32',
          tests=['page_cycler', 'startup', 'tab_switching', 'memory'],
          svnurl=config.Master.merge_branch_url,
          postfix='merge perf', slave_name='try-win32-5',
          register_slave=False, locks=win32_locks[5])

CreateBot(index=1, target='Release', os='win32', tests=['unit', 'ui'],
          svnurl=config.Master.merge_branch_url,
          postfix='merge', slave_name='try-win32-6',
          register_slave=False, locks=win32_locks[6])

CreateBot(index=1, target='Debug', os='win32', tests=['unit', 'ui'],
          svnurl=config.Master.merge_branch_url,
          postfix='merge', slave_name='try-win32-7',
          register_slave=False, locks=win32_locks[7])

CreateBot(index=1, target='Debug', os='win32', tests=['test_shell', 'webkit'],
          postfix='webkit', webkit=True, slave_name='try-win32-8',
          register_slave=False, locks=win32_locks[8])

CreateBot(index=1, target='Release', os='win32', tests=['test_shell', 'webkit'],
          postfix='webkit', webkit=True, slave_name='try-win32-9',
          register_slave=False, locks=win32_locks[9])

# Mixed bag bots. They are all manually triggered.
c['slaves'].append(BuildSlave('try-win-multi-1',
                              config.Master.GetBotPassword()))
c['slaves'].append(BuildSlave('try-win-multi-2',
                              config.Master.GetBotPassword()))

for index in (1,2):
  win_multi_locks.append(locks.SlaveLock('try-win-multi-%d' % index))
  CreateBot(index=index, target='Hammer', os='win32', tests=['unit'],
            postfix='scons', options=['--build-tool=scons'],
            slave_name=('try-win-multi-%d' % index), register_slave=False,
            locks=win_multi_locks[index])

  CreateBot(index=index, target='Release', os='win32',
            postfix='official', mode='official', timeout=3600,
            slave_name=('try-win-multi-%d' % index), register_slave=False,
            locks=win_multi_locks[index])

  CreateBot(index=index, target='Debug', os='win32',
            postfix='jsc', solution='chrome_kjs.sln',
            slave_name=('try-win-multi-%d' % index), register_slave=False,
            tests=['selenium', 'unit', 'ui', 'test_shell', 'page_cycler'],
            locks=win_multi_locks[index])

  CreateBot(index=index, target='Release', os='win32',
            postfix='perf official', mode='official', perf_id='try-official',
            slave_name=('try-win-multi-%d' % index), register_slave=False,
            timeout=3600,
            tests=['selenium', 'unit', 'ui', 'test_shell',
                   'page_cycler', 'startup', 'tab_switching'],
            locks=win_multi_locks[index])


####### SCHEDULERS

# Configure the Schedulers;
# Main Tryscheduler for the try queue. groups is defined in the loop above.
c['schedulers'] = []

c['schedulers'].append(TryJob(name='try_job',
                              jobdir='tryserver',
                              pools=pools))

# c['schedulers'].append(TryJob(name='try_job',
                              # jobdir='tryserver.webkit_merge',
                              # pools=[['try win32 webkit merge rel 1'],
                                     # ['try win32 webkit merge dbg 1'],
                                     # ['try mac webkit merge dbg 1'],
                                     # ['try linux webkit merge dbg 1']]))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

if WEB_STATUS:
  #from buildbot.status.html import WebStatus
  from chromium_status import WebStatus
  c['status'].append(WebStatus(MASTER_PORT, allowForce=True))

# TODO(maruel):  Send to the email burried in the buildsetID.
if MAIL_NOTIFIER:
  from mail_notifier import MailNotifier
  c['status'].append(MailNotifier(
      fromaddr='try_server_noreply@%s' % MASTER_HOST,
      subject="try %(result)s for %(reason)s on %(builder)s",
      mode='all',
      relayhost='smtp',
      lookup="google.com",
      extraRecipients=['maruel@google.com']))

# TODO(maruel):  Alert the nick burried in the buildsetID.
if IRC_STATUS_BOT:
  from buildbot.status import words
  # Patch our topic-observing bot in on top of the IRC factory.
  from chromium_status import IrcStatusChatterBot
  words.IrcStatusFactory.protocol = IrcStatusChatterBot
  c['status'].append(words.IRC(host=config.Master.irc_host,
                               nick='trybot',
                               channels=config.Master.irc_channels))

if PB_LISTENER:
  from buildbot.status import client
  c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = 'debugpassword'

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole('tcp:9999:interface=127.0.0.1',
#                                       'admin', 'password')


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = 'Chrome try server'
c['projectURL'] = 'http://go/ChromeTryServer'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://%s:%s/' % (MASTER_HOST, MASTER_PORT)
