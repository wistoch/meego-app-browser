Index: storage/StorageNamespaceImpl.cpp
===================================================================
--- storage/StorageNamespaceImpl.cpp	(revision 60900)
+++ storage/StorageNamespaceImpl.cpp	(working copy)
@@ -108,7 +108,7 @@
 
     RefPtr<SecurityOrigin> origin = prpOrigin;
     RefPtr<StorageAreaImpl> storageArea;
-    if (storageArea = m_storageAreaMap.get(origin))
+    if ((storageArea = m_storageAreaMap.get(origin)))
         return storageArea.release();
 
     storageArea = StorageAreaImpl::create(m_storageType, origin, m_syncManager, m_quota);
Index: page/animation/AnimationBase.h
===================================================================
--- page/animation/AnimationBase.h	(revision 60900)
+++ page/animation/AnimationBase.h	(working copy)
@@ -42,7 +42,7 @@
 class Node;
 class RenderObject;
 class RenderStyle;
-class TimingFunction;
+struct TimingFunction;
 
 class AnimationBase : public RefCounted<AnimationBase> {
     friend class CompositeAnimation;
Index: platform/graphics/mac/FontPlatformData.h
===================================================================
--- platform/graphics/mac/FontPlatformData.h	(revision 60900)
+++ platform/graphics/mac/FontPlatformData.h	(working copy)
@@ -51,7 +51,8 @@
 inline CTFontRef toCTFontRef(NSFont *nsFont) { return reinterpret_cast<CTFontRef>(nsFont); }
 #endif
 
-struct FontPlatformData {
+class FontPlatformData {  // FIXME
+  public:
     FontPlatformData(float size, bool syntheticBold, bool syntheticOblique)
         : m_syntheticBold(syntheticBold)
         , m_syntheticOblique(syntheticOblique)
Index: platform/graphics/BitmapImage.h
===================================================================
--- platform/graphics/BitmapImage.h	(revision 60900)
+++ platform/graphics/BitmapImage.h	(working copy)
@@ -57,7 +57,7 @@
 // invoking our constructor or destructor. This allows us to have a vector even for a struct
 // that's not copyable.
 namespace WTF {
-    template<> class VectorTraits<WebCore::FrameData> : public SimpleClassVectorTraits {};
+    template<> struct VectorTraits<WebCore::FrameData> : public SimpleClassVectorTraits {};
 }
 
 namespace WebCore {
Index: accessibility/AccessibilityTableCell.cpp
===================================================================
--- accessibility/AccessibilityTableCell.cpp	(revision 60900)
+++ accessibility/AccessibilityTableCell.cpp	(working copy)
@@ -71,7 +71,7 @@
 AccessibilityObject* AccessibilityTableCell::parentTable() const
 {
     if (!m_renderer || !m_renderer->isTableCell())
-        return false;
+        return NULL;
     
     return axObjectCache()->getOrCreate(toRenderTableCell(m_renderer)->table());
 }
Index: accessibility/AccessibilityRenderObject.cpp
===================================================================
--- accessibility/AccessibilityRenderObject.cpp	(revision 60900)
+++ accessibility/AccessibilityRenderObject.cpp	(working copy)
@@ -1255,11 +1255,11 @@
 HTMLLabelElement* AccessibilityRenderObject::labelElementContainer() const
 {
     if (!m_renderer)
-        return false;
+        return NULL;
 
     // the control element should not be considered part of the label
     if (isControl())
-        return false;
+        return NULL;
     
     // find if this has a parent that is a label
     for (Node* parentNode = m_renderer->node(); parentNode; parentNode = parentNode->parentNode()) {
Index: bindings/v8/NPV8Object.cpp
===================================================================
--- bindings/v8/NPV8Object.cpp	(revision 60900)
+++ bindings/v8/NPV8Object.cpp	(working copy)
@@ -58,7 +58,7 @@
 
 WrapperTypeInfo* npObjectTypeInfo()
 {
-    static WrapperTypeInfo typeInfo = { 0, 0, false };
+    static WrapperTypeInfo typeInfo = { 0, 0, NULL };
     return &typeInfo;
 }
 
Index: bindings/v8/custom/V8HTMLOptionElementConstructor.cpp
===================================================================
--- bindings/v8/custom/V8HTMLOptionElementConstructor.cpp	(revision 60900)
+++ bindings/v8/custom/V8HTMLOptionElementConstructor.cpp	(working copy)
@@ -44,7 +44,7 @@
 
 namespace WebCore {
 
-WrapperTypeInfo V8HTMLOptionElementConstructor::info = { V8HTMLOptionElementConstructor::GetTemplate, 0, false };
+WrapperTypeInfo V8HTMLOptionElementConstructor::info = { V8HTMLOptionElementConstructor::GetTemplate, 0, NULL };
 
 static v8::Handle<v8::Value> v8HTMLOptionElementConstructorCallback(const v8::Arguments& args)
 {
Index: html/HTMLFormElement.cpp
===================================================================
--- html/HTMLFormElement.cpp	(revision 60900)
+++ html/HTMLFormElement.cpp	(working copy)
@@ -648,7 +648,7 @@
 
     // see if we have seen something with this name before
     RefPtr<HTMLFormControlElement> aliasElem;
-    if (aliasElem = elementForAlias(name)) {
+    if ((aliasElem = elementForAlias(name))) {
         bool found = false;
         for (unsigned n = 0; n < namedItems.size(); n++) {
             if (namedItems[n] == aliasElem.get()) {
Index: inspector/InspectorValues.cpp
===================================================================
--- inspector/InspectorValues.cpp	(revision 60900)
+++ inspector/InspectorValues.cpp	(working copy)
@@ -599,7 +599,7 @@
 {
     PassRefPtr<InspectorValue> value = get(name);
     if (!value)
-        return false;
+        return 0;
     return value->asObject();
 }
 
@@ -607,7 +607,7 @@
 {
     PassRefPtr<InspectorValue> value = get(name);
     if (!value)
-        return false;
+        return 0;
     return value->asArray();
 }
 
Index: rendering/RootInlineBox.cpp
===================================================================
--- rendering/RootInlineBox.cpp	(revision 60900)
+++ rendering/RootInlineBox.cpp	(working copy)
@@ -411,7 +411,7 @@
 EllipsisBox* RootInlineBox::ellipsisBox() const
 {
     if (!m_hasEllipsisBox)
-        return false;
+        return NULL;
     return gEllipsisBoxMap->get(this);
 }
 
Index: rendering/RenderBlock.h
===================================================================
--- rendering/RenderBlock.h	(revision 60900)
+++ rendering/RenderBlock.h	(working copy)
@@ -38,7 +38,7 @@
 struct BidiRun;
 
 template <class Iterator, class Run> class BidiResolver;
-template <class Iterator> class MidpointState;
+template <class Iterator> struct MidpointState;
 typedef BidiResolver<InlineIterator, BidiRun> InlineBidiResolver;
 typedef MidpointState<InlineIterator> LineMidpointState;
 
Index: css/CSSStyleSheet.h
===================================================================
--- css/CSSStyleSheet.h	(revision 60900)
+++ css/CSSStyleSheet.h	(working copy)
@@ -26,7 +26,7 @@
 
 namespace WebCore {
 
-class CSSNamespace;
+struct CSSNamespace;
 class CSSParser;
 class CSSRule;
 class DocLoader;
