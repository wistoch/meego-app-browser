# Copyright (c) 2006-2008 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')

env = env.Clone()


cygwin = Dir('#../third_party/cygwin/bin')
cygwin_posix = cygwin.abspath.replace('\\', '/')
env.PrependENVPath('PATH', '../third_party/cygwin/bin')


hash_table_cmd = '$PERL $CREATE_HASH_TABLE $SOURCE $CREATE_HASH_TABLE_FLAGS > $TARGET'

env.Replace(
    CREATE_HASH_TABLE_COM       = hash_table_cmd,
    CREATE_HASH_TABLE           = env.File('#/../third_party/WebKit/JavaScriptCore/kjs/create_hash_table'),
    CREATE_HASH_TABLE_FLAGS     = '-i',
)

env['BUILDERS']['Lookup_Table_h'] = Builder(action = '$CREATE_HASH_TABLE_COM',
                                            suffix = '.lut.h',
                                            src_suffix = '.cpp')


inputs = [
    'array_object',
    'date_object',
    'math_object',
    'number_object',
    'regexp_object',
    'string_object',
]

for i in inputs:
    env.Lookup_Table_h(i, '$KJS_DIR/%s.cpp' % i)

env.Lookup_Table_h('lexer', '$KJS_DIR/keywords.table',
                   CREATE_HASH_TABLE_FLAGS='')

# TODO(bradnelson): sucks, needs relative path
env.Command('$WEBKIT_DIR/port/JavaScriptCore/chartables.c',
            '$PCRE_DIR/dftables',
            '$PERL ../third_party/WebKit/JavaScriptCore/pcre/dftables ' + \
            '${TARGET.posix}')

# We'd like to do this as follows:
#env.CXXFile('grammar.cpp', '$KJS_DIR/grammar.y')
# but SCons has a HARD-WIRED notion that the source must be a .yy file.
# TODO(bradnelson): not sure why YACCCOM is needed, but fails without
cpp = env.Command(['grammar.cpp', 'grammar.h'],
                  '$KJS_DIR/grammar.y',
                  '$YACCCOM',
                  YACCCOM = '$YACC $YACCFLAGS -o $TARGET $SOURCES',
                  YACCFLAGS = '-d -p kjsyy')
env.AddPostAction(cpp, Move('${TARGETS[1]}', '${TARGET.dir}/grammar.hpp'))


# Stuff for WTF
env = env.Clone(
    CPPPATH = [
        '$JAVASCRIPTCORE_DIR',
        '$JAVASCRIPTCORE_DIR/kjs',
        '$WTF_DIR',
        '$JAVASCRIPTCORE_DIR/API',
        '$JAVASCRIPTCORE_DIR/bindings',
        '$JAVASCRIPTCORE_DIR/bindings/c',
        '$JAVASCRIPTCORE_DIR/bindings/jni',
        '$WEBKIT_DIR/pending',
        '$WEBKIT_DIR/pending/wtf',
        '$ICU38_DIR/public/common',
        '$ICU38_DIR/public/i18n',
        '$WEBKIT_DIR',
        '#/..',
    ],
)

env.Append(
    CPPDEFINES = [
        'HAVE_CONFIG_H',
        '__STD_C',
        'U_STATIC_IMPLEMENTATION',
        ]
    )

if env['PLATFORM'] == 'win32':
    env.Append(
        CPPPATH = [
                # Windows workarounds to not having pthread.h and sched.h
                '$WEBKIT_DIR/build/JavaScriptCore',
                # Windows workarounds to not having stdint.h
                '$JAVASCRIPTCORE_DIR/os-win32',
                ],
        CPPDEFINES = [
                'CRASH=__debugbreak',
                '_WIN32_WINNT=0x0600',
                'WINVER=0x0600',
                ],
        CCFLAGS = [
                '/TP',

                '/WX',
                '/Wp64',

                '/wd4127',
                '/wd4355',
                '/wd4510',
                '/wd4512',
                '/wd4610',
                '/wd4706',
                ],
        )

wtf_inputs = [
    '$WTF_DIR/Assertions.cpp',
    '$WTF_DIR/unicode/UTF8.cpp',
    '$WTF_DIR/TCSystemAlloc.cpp',
    '$WTF_DIR/HashTable.cpp',
]

env.ChromeStaticLibrary('WTF', wtf_inputs)

