KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


FAIL StripSpaces(eval.toString()) should be functioneval(){[nativecode]}. Was functioneval(x){if(!(typeof(x)==='string'))returnxvarglobal_receiver=GlobalReceiver(global)varthis_is_global_receiver=(this===global_receiver)varglobal_is_detached=(global===global_receiver)if(!this_is_global_receiver||global_is_detached){thrownew$EvalError('The"this"objectpassedtoevalmust'+'betheglobalobjectfromwhichevaloriginated')}varf=CompileString(x,false)if(!(typeof(f)==='function'))returnfreturnf.call(this)}.
FAIL StripSpaces(parseInt.toString()) should be functionparseInt(){[nativecode]}. Was functionparseInt(string,radix){if(radix===void0){if(_IsSmi(string))returnstringif((typeof(string)==='number')&&((string<-0.01&&-1e9<string)||(0.01<string&&string<1e9))){returnstring|0}radix=0}else{radix=(_IsSmi(IS_VAR(radix))?radix:ToInt32(radix))if(!(radix==0||(2<=radix&&radix<=36)))return$NaN}returnStringParseInt(ToString(string),radix)}.
FAIL StripSpaces(parseFloat.toString()) should be functionparseFloat(){[nativecode]}. Was functionparseFloat(string){returnStringParseFloat(ToString(string))}.
FAIL StripSpaces(isNaN.toString()) should be functionisNaN(){[nativecode]}. Was functionisNaN(number){varn=ToNumber(number)return(!_IsSmi(IS_VAR(n))&&!(n==n))}.
FAIL StripSpaces(isFinite.toString()) should be functionisFinite(){[nativecode]}. Was functionisFinite(number){returnNumberIsFinite(ToNumber(number))}.
FAIL StripSpaces(escape.toString()) should be functionescape(){[nativecode]}. Was functionescape(str){vars=ToString(str)returnURIEscape(s)}.
FAIL StripSpaces(unescape.toString()) should be functionunescape(){[nativecode]}. Was functionunescape(str){vars=ToString(str)returnURIUnescape(s)}.
FAIL StripSpaces(Object.prototype.toString.toString()) should be functiontoString(){[nativecode]}. Was functiontoString(){varc=_ClassOf(this)if(c==='Arguments')c='Object'return"[object"+c+"]"}.
FAIL StripSpaces(Object.prototype.toLocaleString.toString()) should be functiontoLocaleString(){[nativecode]}. Was functiontoLocaleString(){returnthis.toString()}.
FAIL StripSpaces(Object.prototype.valueOf.toString()) should be functionvalueOf(){[nativecode]}. Was functionvalueOf(){returnthis}.
FAIL StripSpaces(Object.prototype.hasOwnProperty.toString()) should be functionhasOwnProperty(){[nativecode]}. Was functionhasOwnProperty(V){returnHasLocalProperty(ToObject(this),ToString(V))}.
FAIL StripSpaces(Object.prototype.isPrototypeOf.toString()) should be functionisPrototypeOf(){[nativecode]}. Was functionisPrototypeOf(V){if(!(typeof(V)==='object')&&!(typeof(V)==='function'))returnfalsereturnIsInPrototypeChain(this,V)}.
FAIL StripSpaces(Object.prototype.propertyIsEnumerable.toString()) should be functionpropertyIsEnumerable(){[nativecode]}. Was functionpropertyIsEnumerable(V){if(this==null)returnfalseif(!(typeof(this)==='object')&&!(typeof(this)==='function'))returnfalsereturnIsPropertyEnumerable(this,ToString(V))}.
FAIL StripSpaces(Function.prototype.toString.toString()) should be functiontoString(){[nativecode]}. Was functiontoString(){returnFunctionSourceString(this)}.
PASS StripSpaces(Function.prototype.apply.toString()) is "functionapply(){[nativecode]}"
PASS StripSpaces(Function.prototype.call.toString()) is "functioncall(){[nativecode]}"
FAIL StripSpaces(Array.prototype.toString.toString()) should be functiontoString(){[nativecode]}. Was functiontoString(){if(!(_IsArray(this))){thrownew$TypeError('Array.prototype.toStringisnotgeneric')}returnJoin(this,this.length,',',ConvertToString)}.
FAIL StripSpaces(Array.prototype.toLocaleString.toString()) should be functiontoLocaleString(){[nativecode]}. Was functiontoLocaleString(){if(!(_IsArray(this))){thrownew$TypeError('Array.prototype.toStringisnotgeneric')}returnJoin(this,this.length,',',ConvertToLocaleString)}.
FAIL StripSpaces(Array.prototype.concat.toString()) should be functionconcat(){[nativecode]}. Was functionconcat(arg1){vararg_count=_ArgumentsLength()vararrays=new$Array(1+arg_count)arrays[0]=thisfor(vari=0i<arg_counti++){arrays[i+1]=_Arguments(i)}returnArrayConcat(arrays)}.
FAIL StripSpaces(Array.prototype.join.toString()) should be functionjoin(){[nativecode]}. Was functionjoin(separator){if((typeof(separator)==='undefined'))separator=','elseseparator=ToString(separator)returnJoin(this,ToUint32(this.length),separator,ConvertToString)}.
FAIL StripSpaces(Array.prototype.pop.toString()) should be functionpop(){[nativecode]}. Was functionpop(){varn=ToUint32(this.length)if(n==0){this.length=nreturn}n--varvalue=this[n]this.length=ndeletethis[n]returnvalue}.
FAIL StripSpaces(Array.prototype.push.toString()) should be functionpush(){[nativecode]}. Was functionpush(){varn=ToUint32(this.length)varm=_ArgumentsLength()for(vari=0i<mi++){this[i+n]=_Arguments(i)}this.length=n+mreturnthis.length}.
FAIL StripSpaces(Array.prototype.reverse.toString()) should be functionreverse(){[nativecode]}. Was functionreverse(){varj=ToUint32(this.length)-1if(UseSparseVariant(this,j,(_IsArray(this)))){SparseReverse(this,j+1)returnthis}for(vari=0i<ji++,j--){varcurrent_i=this[i]if(!(typeof(current_i)==='undefined')||iinthis){varcurrent_j=this[j]if(!(typeof(current_j)==='undefined')||jinthis){this[i]=current_jthis[j]=current_i}else{this[j]=current_ideletethis[i]}}else{varcurrent_j=this[j]if(!(typeof(current_j)==='undefined')||jinthis){this[i]=current_jdeletethis[j]}}}returnthis}.
FAIL StripSpaces(Array.prototype.shift.toString()) should be functionshift(){[nativecode]}. Was functionshift(){varlen=ToUint32(this.length)if(len===0){this.length=0return}varfirst=this[0]if((_IsArray(this)))SmartMove(this,0,1,len,0)elseSimpleMove(this,0,1,len,0)this.length=len-1returnfirst}.
FAIL StripSpaces(Array.prototype.slice.toString()) should be functionslice(){[nativecode]}. Was functionslice(start,end){varlen=ToUint32(this.length)varstart_i=(_IsSmi(IS_VAR(start))?start:ToInteger(start))varend_i=lenif(end!==void0)end_i=(_IsSmi(IS_VAR(end))?end:ToInteger(end))if(start_i<0){start_i+=lenif(start_i<0)start_i=0}else{if(start_i>len)start_i=len}if(end_i<0){end_i+=lenif(end_i<0)end_i=0}else{if(end_i>len)end_i=len}varresult=[]if(end_i<start_i)returnresultif((_IsArray(this))){SmartSlice(this,start_i,end_i-start_i,len,result)}else{SimpleSlice(this,start_i,end_i-start_i,len,result)}result.length=end_i-start_ireturnresult}.
FAIL StripSpaces(Array.prototype.sort.toString()) should be functionsort(){[nativecode]}. Was functionsort(comparefn){varcustom_compare=(typeof(comparefn)==='function')functionCompare(x,y){if(x===y)return0if(custom_compare){returncomparefn.call(null,x,y)}if(_IsSmi(x)&&_IsSmi(y)){returnSmiLexicographicCompare(x,y)}x=ToString(x)y=ToString(y)if(x==y)return0elsereturnx<y?-1:1}functionInsertionSort(a,from,to){for(vari=from+1i<toi++){varelement=a[i]varkey=(custom_compare||_IsSmi(element))?element:ToString(element)varmin=fromvarmax=iwhile(min<max){varmid=min+((max-min)>>1)varorder=Compare(a[mid],key)if(order==0){min=max=midbreak}if(order<0){min=mid+1}else{max=mid}}for(varj=ij>minj--){a[j]=a[j-1]}a[min]=element}}functionQuickSort(a,from,to){if(to-from<=22){InsertionSort(a,from,to)return}varpivot_index=$floor($random()*(to-from))+fromvarpivot=a[pivot_index]varpivot_key=(custom_compare||_IsSmi(pivot))?pivot:ToString(pivot)a[pivot_index]=a[from]a[from]=pivotvarlow_end=fromvarhigh_start=tofor(vari=from+1i<high_start){varelement=a[i]varorder=Compare(element,pivot_key)if(order<0){a[i]=a[low_end]a[low_end]=elementi++low_end++}elseif(order>0){high_start--a[i]=a[high_start]a[high_start]=element}else{i++}}QuickSort(a,from,low_end)QuickSort(a,high_start,to)}functionCopyFromPrototype(obj,length){varmax=0for(varproto=obj.__proto__protoproto=proto.__proto__){varindices=GetArrayKeys(proto,length)if(indices.length>0){if(indices[0]==-1){varproto_length=indices[1]for(vari=0i<proto_lengthi++){if(!obj.hasOwnProperty(i)&&proto.hasOwnProperty(i)){obj[i]=proto[i]if(i>=max){max=i+1}}}}else{for(vari=0i<indices.lengthi++){varindex=indices[i]if(!(typeof(index)==='undefined')&&!obj.hasOwnProperty(index)&&proto.hasOwnProperty(index)){obj[index]=proto[index]if(index>=max){max=index+1}}}}}}returnmax}functionShadowPrototypeElements(obj,from,to){for(varproto=obj.__proto__protoproto=proto.__proto__){varindices=GetArrayKeys(proto,to)if(indices.length>0){if(indices[0]==-1){varproto_length=indices[1]for(vari=fromi<proto_lengthi++){if(proto.hasOwnProperty(i)){obj[i]=void0}}}else{for(vari=0i<indices.lengthi++){varindex=indices[i]if(!(typeof(index)==='undefined')&&from<=index&&proto.hasOwnProperty(index)){obj[index]=void0}}}}}}functionSafeRemoveArrayHoles(obj){varfirst_undefined=0varlast_defined=length-1varnum_holes=0while(first_undefined<last_defined){while(first_undefined<last_defined&&!(typeof(obj[first_undefined])==='undefined')){first_undefined++}if(!obj.hasOwnProperty(first_undefined)){num_holes++}while(first_undefined<last_defined&&(typeof(obj[last_defined])==='undefined')){if(!obj.hasOwnProperty(last_defined)){num_holes++}last_defined--}if(first_undefined<last_defined){obj[first_undefined]=obj[last_defined]obj[last_defined]=void0}}if(!(typeof(obj[first_undefined])==='undefined'))first_undefined++varifor(i=first_undefinedi<length-num_holesi++){obj[i]=void0}for(i=length-num_holesi<lengthi++){if(iinobj.__proto__){obj[i]=void0}else{deleteobj[i]}}returnfirst_undefined}varlength=ToUint32(this.length)if(length<2)returnthisvaris_array=(_IsArray(this))varmax_prototype_elementif(!is_array){max_prototype_element=CopyFromPrototype(this,length)}varnum_non_undefined=RemoveArrayHoles(this,length)if(num_non_undefined==-1){num_non_undefined=SafeRemoveArrayHoles(this)}QuickSort(this,0,num_non_undefined)if(!is_array&&(num_non_undefined+1<max_prototype_element)){ShadowPrototypeElements(this,num_non_undefined,max_prototype_element)}returnthis}.
FAIL StripSpaces(Array.prototype.splice.toString()) should be functionsplice(){[nativecode]}. Was functionsplice(start,delete_count){varnum_arguments=_ArgumentsLength()if(num_arguments==0)returnvarlen=ToUint32(this.length)varstart_i=(_IsSmi(IS_VAR(start))?start:ToInteger(start))if(start_i<0){start_i+=lenif(start_i<0)start_i=0}else{if(start_i>len)start_i=len}vardel_count=0if(num_arguments>1){del_count=(_IsSmi(IS_VAR(delete_count))?delete_count:ToInteger(delete_count))if(del_count<0)del_count=0if(del_count>len-start_i)del_count=len-start_i}else{del_count=len-start_i}vardeleted_elements=[]deleted_elements.length=del_countvarnum_additional_args=0if(num_arguments>2){num_additional_args=num_arguments-2}varuse_simple_splice=trueif((_IsArray(this))&&num_additional_args!==del_count){varestimated_non_hole_elements=EstimateNumberOfElements(this)if(len>20&&(estimated_non_hole_elements>>2)<(len-start_i)){use_simple_splice=false}}if(use_simple_splice){SimpleSlice(this,start_i,del_count,len,deleted_elements)SimpleMove(this,start_i,del_count,len,num_additional_args)}else{SmartSlice(this,start_i,del_count,len,deleted_elements)SmartMove(this,start_i,del_count,len,num_additional_args)}vari=start_ivararguments_index=2vararguments_length=_ArgumentsLength()while(arguments_index<arguments_length){this[i++]=_Arguments(arguments_index++)}this.length=len-del_count+num_additional_argsreturndeleted_elements}.
FAIL StripSpaces(Array.prototype.unshift.toString()) should be functionunshift(){[nativecode]}. Was functionunshift(arg1){varlen=ToUint32(this.length)varnum_arguments=_ArgumentsLength()if((_IsArray(this)))SmartMove(this,0,0,len,num_arguments)elseSimpleMove(this,0,0,len,num_arguments)for(vari=0i<num_argumentsi++){this[i]=_Arguments(i)}this.length=len+num_argumentsreturnlen+num_arguments}.
FAIL StripSpaces(String.prototype.toString.toString()) should be functiontoString(){[nativecode]}. Was functiontoString(){if(!(typeof(this)==='string')&&!(_ClassOf(this)==='String'))thrownew$TypeError('String.prototype.toStringisnotgeneric')return_ValueOf(this)}.
FAIL StripSpaces(String.prototype.valueOf.toString()) should be functionvalueOf(){[nativecode]}. Was functionvalueOf(){if(!(typeof(this)==='string')&&!(_ClassOf(this)==='String'))thrownew$TypeError('String.prototype.valueOfisnotgeneric')return_ValueOf(this)}.
FAIL StripSpaces(String.prototype.charAt.toString()) should be functioncharAt(){[nativecode]}. Was functioncharAt(pos){varchar_code=_FastCharCodeAt(this,index)if(!_IsSmi(char_code)){varsubject=ToString(this)varindex=(_IsSmi(IS_VAR(pos))?pos:ToInteger(pos))if(index>=subject.length||index<0)return""char_code=StringCharCodeAt(subject,index)}returnCharFromCode(char_code)}.
FAIL StripSpaces(String.prototype.charCodeAt.toString()) should be functioncharCodeAt(){[nativecode]}. Was functioncharCodeAt(pos){varfast_answer=_FastCharCodeAt(this,pos)if(_IsSmi(fast_answer)){returnfast_answer}varsubject=ToString(this)varindex=(_IsSmi(IS_VAR(pos))?pos:ToInteger(pos))returnStringCharCodeAt(subject,index)}.
FAIL StripSpaces(String.prototype.concat.toString()) should be functionconcat(){[nativecode]}. Was functionconcat(){varlen=_ArgumentsLength()varparts=new$Array(len+1)parts[0]=ToString(this)for(vari=0i<leni++)parts[i+1]=ToString(_Arguments(i))returnparts.join('')}.
FAIL StripSpaces(String.prototype.indexOf.toString()) should be functionindexOf(){[nativecode]}. Was functionindexOf(searchString){varsubject_str=ToString(this)varpattern_str=ToString(searchString)varsubject_str_len=subject_str.lengthvarpattern_str_len=pattern_str.lengthvarindex=0if(_ArgumentsLength()>1){vararg1=_Arguments(1)index=(_IsSmi(IS_VAR(arg1))?arg1:ToInteger(arg1))}if(index<0)index=0if(index>subject_str_len)index=subject_str_lenif(pattern_str_len+index>subject_str_len)return-1returnStringIndexOf(subject_str,pattern_str,index)}.
FAIL StripSpaces(String.prototype.lastIndexOf.toString()) should be functionlastIndexOf(){[nativecode]}. Was functionlastIndexOf(searchString){varsub=ToString(this)varsubLength=sub.lengthvarpat=ToString(searchString)varpatLength=pat.lengthvarindex=subLength-patLengthif(_ArgumentsLength()>1){varposition=ToNumber(_Arguments(1))if(!$isNaN(position)){position=(_IsSmi(IS_VAR(position))?position:ToInteger(position))if(position<0){position=0}if(position+patLength<subLength){index=position}}}if(index<0){return-1}returnStringLastIndexOf(sub,pat,index)}.
FAIL StripSpaces(String.prototype.match.toString()) should be functionmatch(){[nativecode]}. Was functionmatch(regexp){if(!(_ClassOf(regexp)==='RegExp'))regexp=new(global.RegExp,$RegExp)(regexp)varsubject=ToString(this)if(!regexp.global)returnregexp.exec(subject)_Log('regexp','regexp-match,%0S,%1r',[subject,regexp])returnStringMatch(subject,regexp,lastMatchInfo)}.
FAIL StripSpaces(String.prototype.replace.toString()) should be functionreplace(){[nativecode]}. Was functionreplace(search,replace){varsubject=ToString(this)if((_ClassOf(search)==='RegExp')){_Log('regexp','regexp-replace,%0r,%1S',[search,subject])if((typeof(replace)==='function')){returnStringReplaceRegExpWithFunction(subject,search,replace)}else{returnStringReplaceRegExp(subject,search,replace)}}search=ToString(search)varstart=StringIndexOf(subject,search,0)if(start<0)returnsubjectvarend=start+search.lengthvarbuilder=newReplaceResultBuilder(subject)builder.addSpecialSlice(0,start)if((typeof(replace)==='function')){builder.add(replace.call(null,search,start,subject))}else{reusableMatchInfo[3]=startreusableMatchInfo[4]=endExpandReplacement(ToString(replace),subject,reusableMatchInfo,builder)}builder.addSpecialSlice(end,subject.length)returnbuilder.generate()}.
FAIL StripSpaces(String.prototype.search.toString()) should be functionsearch(){[nativecode]}. Was functionsearch(re){varregexp=new(global.RegExp,$RegExp)(re)vars=ToString(this)varlast_idx=regexp.lastIndexregexp.lastIndex=0varresult=regexp.exec(s)regexp.lastIndex=last_idxif(result==null)return-1elsereturnresult.index}.
FAIL StripSpaces(String.prototype.slice.toString()) should be functionslice(){[nativecode]}. Was functionslice(start,end){vars=ToString(this)vars_len=s.lengthvarstart_i=(_IsSmi(IS_VAR(start))?start:ToInteger(start))varend_i=s_lenif(end!==void0)end_i=(_IsSmi(IS_VAR(end))?end:ToInteger(end))if(start_i<0){start_i+=s_lenif(start_i<0)start_i=0}else{if(start_i>s_len)start_i=s_len}if(end_i<0){end_i+=s_lenif(end_i<0)end_i=0}else{if(end_i>s_len)end_i=s_len}varnum_c=end_i-start_iif(num_c<0)num_c=0returnSubString(s,start_i,start_i+num_c)}.
FAIL StripSpaces(String.prototype.split.toString()) should be functionsplit(){[nativecode]}. Was functionsplit(separator,limit){varsubject=ToString(this)limit=(limit===void0)?0xffffffff:ToUint32(limit)if(limit===0)return[]if(_ArgumentsLength()===0){return[subject]}varlength=subject.lengthif((_ClassOf(separator)==='RegExp')){_Log('regexp','regexp-split,%0S,%1r',[subject,separator])}else{separator=ToString(separator)if(separator.length==0){varresult=$Array(length)for(vari=0i<lengthi++)result[i]=subject[i]returnresult}}if(length===0){if(splitMatch(separator,subject,0,0)!=null)return[]return[subject]}varcurrentIndex=0varstartIndex=0varresult=[]while(true){if(startIndex===length){result[result.length]=subject.slice(currentIndex,length)returnresult}varlastMatchInfo=splitMatch(separator,subject,currentIndex,startIndex)if((lastMatchInfo===null)){result[result.length]=subject.slice(currentIndex,length)returnresult}varendIndex=lastMatchInfo[4]if(startIndex===endIndex&&endIndex===currentIndex){startIndex++continue}result[result.length]=SubString(subject,currentIndex,lastMatchInfo[3])if(result.length===limit)returnresultfor(vari=2i<((lastMatchInfo)[0])i+=2){varstart=lastMatchInfo[(3+(i))]varend=lastMatchInfo[(3+(i+1))]if(start!=-1&&end!=-1){result[result.length]=SubString(subject,start,end)}else{result[result.length]=void0}if(result.length===limit)returnresult}startIndex=currentIndex=endIndex}}.
FAIL StripSpaces(String.prototype.substr.toString()) should be functionsubstr(){[nativecode]}. Was functionsubstr(start,n){vars=ToString(this)varlenif(n===void0){len=s.length}else{len=(_IsSmi(IS_VAR(n))?n:ToInteger(n))if(len<=0)return''}if(start===void0){start=0}else{start=(_IsSmi(IS_VAR(start))?start:ToInteger(start))if(start>=s.length)return''if(start<0){start+=s.lengthif(start<0)start=0}}varend=start+lenif(end>s.length)end=s.lengthreturnSubString(s,start,end)}.
FAIL StripSpaces(String.prototype.substring.toString()) should be functionsubstring(){[nativecode]}. Was functionsubstring(start,end){vars=ToString(this)vars_len=s.lengthvarstart_i=(_IsSmi(IS_VAR(start))?start:ToInteger(start))varend_i=s_lenif(!(typeof(end)==='undefined'))end_i=(_IsSmi(IS_VAR(end))?end:ToInteger(end))if(start_i<0)start_i=0if(start_i>s_len)start_i=s_lenif(end_i<0)end_i=0if(end_i>s_len)end_i=s_lenif(start_i>end_i){vartmp=end_iend_i=start_istart_i=tmp}returnSubString(s,start_i,end_i)}.
FAIL StripSpaces(String.prototype.toLowerCase.toString()) should be functiontoLowerCase(){[nativecode]}. Was functiontoLowerCase(){returnStringToLowerCase(ToString(this))}.
FAIL StripSpaces(String.prototype.toUpperCase.toString()) should be functiontoUpperCase(){[nativecode]}. Was functiontoUpperCase(){returnStringToUpperCase(ToString(this))}.
FAIL StripSpaces(String.prototype.big.toString()) should be functionbig(){[nativecode]}. Was functionbig(){return"<big>"+this+"</big>"}.
FAIL StripSpaces(String.prototype.small.toString()) should be functionsmall(){[nativecode]}. Was functionsmall(){return"<small>"+this+"</small>"}.
FAIL StripSpaces(String.prototype.blink.toString()) should be functionblink(){[nativecode]}. Was functionblink(){return"<blink>"+this+"</blink>"}.
FAIL StripSpaces(String.prototype.bold.toString()) should be functionbold(){[nativecode]}. Was functionbold(){return"<b>"+this+"</b>"}.
FAIL StripSpaces(String.prototype.fixed.toString()) should be functionfixed(){[nativecode]}. Was functionfixed(){return"<tt>"+this+"</tt>"}.
FAIL StripSpaces(String.prototype.italics.toString()) should be functionitalics(){[nativecode]}. Was functionitalics(){return"<i>"+this+"</i>"}.
FAIL StripSpaces(String.prototype.strike.toString()) should be functionstrike(){[nativecode]}. Was functionstrike(){return"<strike>"+this+"</strike>"}.
FAIL StripSpaces(String.prototype.sub.toString()) should be functionsub(){[nativecode]}. Was functionsub(){return"<sub>"+this+"</sub>"}.
FAIL StripSpaces(String.prototype.sup.toString()) should be functionsup(){[nativecode]}. Was functionsup(){return"<sup>"+this+"</sup>"}.
FAIL StripSpaces(String.prototype.fontcolor.toString()) should be functionfontcolor(){[nativecode]}. Was functionfontcolor(color){return"<fontcolor=\""+HtmlEscape(color)+"\">"+this+"</font>"}.
FAIL StripSpaces(String.prototype.fontsize.toString()) should be functionfontsize(){[nativecode]}. Was functionfontsize(size){return"<fontsize=\""+HtmlEscape(size)+"\">"+this+"</font>"}.
FAIL StripSpaces(String.prototype.anchor.toString()) should be functionanchor(){[nativecode]}. Was functionanchor(name){return"<aname=\""+HtmlEscape(name)+"\">"+this+"</a>"}.
FAIL StripSpaces(String.prototype.link.toString()) should be functionlink(){[nativecode]}. Was functionlink(s){return"<ahref=\""+HtmlEscape(s)+"\">"+this+"</a>"}.
FAIL StripSpaces(Boolean.prototype.toString.toString()) should be functiontoString(){[nativecode]}. Was functiontoString(){if(!(typeof(this)==='boolean')&&!(_ClassOf(this)==='Boolean'))thrownew$TypeError('Boolean.prototype.toStringisnotgeneric')returnToString(_ValueOf(this))}.
FAIL StripSpaces(Boolean.prototype.valueOf.toString()) should be functionvalueOf(){[nativecode]}. Was functionvalueOf(){if(!(typeof(this)==='boolean')&&!(_ClassOf(this)==='Boolean'))thrownew$TypeError('Boolean.prototype.valueOfisnotgeneric')return_ValueOf(this)}.
FAIL StripSpaces(Number.prototype.toString.toString()) should be functiontoString(){[nativecode]}. Was functiontoString(radix){varnumber=thisif(!(typeof(this)==='number')){if(!(_ClassOf(this)==='Number'))thrownew$TypeError('Number.prototype.toStringisnotgeneric')number=_ValueOf(this)}if((typeof(radix)==='undefined')||radix===10){returnToString(number)}radix=(_IsSmi(IS_VAR(radix))?radix:ToInteger(radix))if(radix<2||radix>36){thrownew$RangeError('toString()radixargumentmustbebetween2and36')}returnNumberToRadixString(number,radix)}.
FAIL StripSpaces(Number.prototype.toLocaleString.toString()) should be functiontoLocaleString(){[nativecode]}. Was functiontoLocaleString(){returnthis.toString()}.
FAIL StripSpaces(Number.prototype.valueOf.toString()) should be functionvalueOf(){[nativecode]}. Was functionvalueOf(){if(!(typeof(this)==='number')&&!(_ClassOf(this)==='Number'))thrownew$TypeError('Number.prototype.valueOfisnotgeneric')return_ValueOf(this)}.
FAIL StripSpaces(Number.prototype.toFixed.toString()) should be functiontoFixed(){[nativecode]}. Was functiontoFixed(fractionDigits){varf=(_IsSmi(IS_VAR(fractionDigits))?fractionDigits:ToInteger(fractionDigits))if(f<0||f>20){thrownew$RangeError("toFixed()digitsargumentmustbebetween0and20")}varx=ToNumber(this)returnNumberToFixed(x,f)}.
FAIL StripSpaces(Number.prototype.toExponential.toString()) should be functiontoExponential(){[nativecode]}. Was functiontoExponential(fractionDigits){varf=-1if(!(typeof(fractionDigits)==='undefined')){f=(_IsSmi(IS_VAR(fractionDigits))?fractionDigits:ToInteger(fractionDigits))if(f<0||f>20){thrownew$RangeError("toExponential()argumentmustbebetween0and20")}}varx=ToNumber(this)returnNumberToExponential(x,f)}.
FAIL StripSpaces(Number.prototype.toPrecision.toString()) should be functiontoPrecision(){[nativecode]}. Was functiontoPrecision(precision){if((typeof(precision)==='undefined'))returnToString(_ValueOf(this))varp=(_IsSmi(IS_VAR(precision))?precision:ToInteger(precision))if(p<1||p>21){thrownew$RangeError("toPrecision()argumentmustbebetween1and21")}varx=ToNumber(this)returnNumberToPrecision(x,p)}.
FAIL StripSpaces(Math.abs.toString()) should be functionabs(){[nativecode]}. Was functionabs(x){if(_IsSmi(x))returnx>=0?x:-xif(!(typeof(x)==='number'))x=ToNumber(x)returnMath_abs(x)}.
FAIL StripSpaces(Math.acos.toString()) should be functionacos(){[nativecode]}. Was functionacos(x){if(!(typeof(x)==='number'))x=ToNumber(x)returnMath_acos(x)}.
FAIL StripSpaces(Math.asin.toString()) should be functionasin(){[nativecode]}. Was functionasin(x){if(!(typeof(x)==='number'))x=ToNumber(x)returnMath_asin(x)}.
FAIL StripSpaces(Math.atan.toString()) should be functionatan(){[nativecode]}. Was functionatan(x){if(!(typeof(x)==='number'))x=ToNumber(x)returnMath_atan(x)}.
FAIL StripSpaces(Math.atan2.toString()) should be functionatan2(){[nativecode]}. Was functionatan2(y,x){if(!(typeof(y)==='number'))y=ToNumber(y)if(!(typeof(x)==='number'))x=ToNumber(x)returnMath_atan2(y,x)}.
FAIL StripSpaces(Math.ceil.toString()) should be functionceil(){[nativecode]}. Was functionceil(x){if(!(typeof(x)==='number'))x=ToNumber(x)returnMath_ceil(x)}.
FAIL StripSpaces(Math.cos.toString()) should be functioncos(){[nativecode]}. Was functioncos(x){if(!(typeof(x)==='number'))x=ToNumber(x)return_Math_cos(x)}.
FAIL StripSpaces(Math.exp.toString()) should be functionexp(){[nativecode]}. Was functionexp(x){if(!(typeof(x)==='number'))x=ToNumber(x)returnMath_exp(x)}.
FAIL StripSpaces(Math.floor.toString()) should be functionfloor(){[nativecode]}. Was functionfloor(x){if(!(typeof(x)==='number'))x=ToNumber(x)if(x<=0x7FFFFFFF&&x>0){returnx<<0}else{returnMath_floor(x)}}.
FAIL StripSpaces(Math.log.toString()) should be functionlog(){[nativecode]}. Was functionlog(x){if(!(typeof(x)==='number'))x=ToNumber(x)returnMath_log(x)}.
FAIL StripSpaces(Math.max.toString()) should be functionmax(){[nativecode]}. Was functionmax(arg1,arg2){varr=-$Infinityvarlength=_ArgumentsLength()for(vari=0i<lengthi++){varn=ToNumber(_Arguments(i))if((!_IsSmi(IS_VAR(n))&&!(n==n)))returnnif(n>r||(r===0&&n===0&&!_IsSmi(r)))r=n}returnr}.
FAIL StripSpaces(Math.min.toString()) should be functionmin(){[nativecode]}. Was functionmin(arg1,arg2){varr=$Infinityvarlength=_ArgumentsLength()for(vari=0i<lengthi++){varn=ToNumber(_Arguments(i))if((!_IsSmi(IS_VAR(n))&&!(n==n)))returnnif(n<r||(r===0&&n===0&&!_IsSmi(n)))r=n}returnr}.
FAIL StripSpaces(Math.pow.toString()) should be functionpow(){[nativecode]}. Was functionpow(x,y){if(!(typeof(x)==='number'))x=ToNumber(x)if(!(typeof(y)==='number'))y=ToNumber(y)returnMath_pow(x,y)}.
FAIL StripSpaces(Math.random.toString()) should be functionrandom(){[nativecode]}. Was functionrandom(){return_RandomPositiveSmi()/0x40000000}.
FAIL StripSpaces(Math.round.toString()) should be functionround(){[nativecode]}. Was functionround(x){if(!(typeof(x)==='number'))x=ToNumber(x)returnMath_round(x)}.
FAIL StripSpaces(Math.sin.toString()) should be functionsin(){[nativecode]}. Was functionsin(x){if(!(typeof(x)==='number'))x=ToNumber(x)return_Math_sin(x)}.
FAIL StripSpaces(Math.sqrt.toString()) should be functionsqrt(){[nativecode]}. Was functionsqrt(x){if(!(typeof(x)==='number'))x=ToNumber(x)returnMath_sqrt(x)}.
FAIL StripSpaces(Math.tan.toString()) should be functiontan(){[nativecode]}. Was functiontan(x){if(!(typeof(x)==='number'))x=ToNumber(x)returnMath_tan(x)}.
FAIL StripSpaces(Date.prototype.toString.toString()) should be functiontoString(){[nativecode]}. Was functiontoString(){vart=(_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError())if((!_IsSmi(IS_VAR(t))&&!(t==t)))return'InvalidDate'returnDatePrintString(LocalTimeNoCheck(t))+LocalTimezoneString(t)}.
FAIL StripSpaces(Date.prototype.toUTCString.toString()) should be functiontoUTCString(){[nativecode]}. Was functiontoUTCString(){vart=(_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError())if((!_IsSmi(IS_VAR(t))&&!(t==t)))return'InvalidDate'returnWeekDays[WeekDay(t)]+','+TwoDigitString(DateFromTime(t))+''+Months[MonthFromTime(t)]+''+YearFromTime(t)+''+TimeString(t)+'GMT'}.
FAIL StripSpaces(Date.prototype.toDateString.toString()) should be functiontoDateString(){[nativecode]}. Was functiontoDateString(){vart=(_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError())if((!_IsSmi(IS_VAR(t))&&!(t==t)))return'InvalidDate'returnDateString(LocalTimeNoCheck(t))}.
FAIL StripSpaces(Date.prototype.toTimeString.toString()) should be functiontoTimeString(){[nativecode]}. Was functiontoTimeString(){vart=(_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError())if((!_IsSmi(IS_VAR(t))&&!(t==t)))return'InvalidDate'varlt=LocalTimeNoCheck(t)returnTimeString(lt)+LocalTimezoneString(lt)}.
FAIL StripSpaces(Date.prototype.toLocaleString.toString()) should be functiontoLocaleString(){[nativecode]}. Was functiontoLocaleString(){returnDateToString.call(this)}.
FAIL StripSpaces(Date.prototype.toLocaleDateString.toString()) should be functiontoLocaleDateString(){[nativecode]}. Was functiontoLocaleDateString(){vart=(_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError())if((!_IsSmi(IS_VAR(t))&&!(t==t)))return'InvalidDate'returnLongDateString(LocalTimeNoCheck(t))}.
FAIL StripSpaces(Date.prototype.toLocaleTimeString.toString()) should be functiontoLocaleTimeString(){[nativecode]}. Was functiontoLocaleTimeString(){vart=(_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError())if((!_IsSmi(IS_VAR(t))&&!(t==t)))return'InvalidDate'varlt=LocalTimeNoCheck(t)returnTimeString(lt)}.
FAIL StripSpaces(Date.prototype.valueOf.toString()) should be functionvalueOf(){[nativecode]}. Was functionvalueOf(){return(_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError())}.
FAIL StripSpaces(Date.prototype.getTime.toString()) should be functiongetTime(){[nativecode]}. Was functiongetTime(){return(_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError())}.
FAIL StripSpaces(Date.prototype.getFullYear.toString()) should be functiongetFullYear(){[nativecode]}. Was functiongetFullYear(){returnGetFullYearFrom(this)}.
FAIL StripSpaces(Date.prototype.getUTCFullYear.toString()) should be functiongetUTCFullYear(){[nativecode]}. Was functiongetUTCFullYear(){returnGetUTCFullYearFrom(this)}.
FAIL StripSpaces(Date.prototype.toGMTString.toString()) should be functiontoGMTString(){[nativecode]}. Was functiontoGMTString(){returnDateToUTCString.call(this)}.
FAIL StripSpaces(Date.prototype.getMonth.toString()) should be functiongetMonth(){[nativecode]}. Was functiongetMonth(){returnGetMonthFrom(this)}.
FAIL StripSpaces(Date.prototype.getUTCMonth.toString()) should be functiongetUTCMonth(){[nativecode]}. Was functiongetUTCMonth(){returnGetUTCMonthFrom(this)}.
FAIL StripSpaces(Date.prototype.getDate.toString()) should be functiongetDate(){[nativecode]}. Was functiongetDate(){returnGetDateFrom(this)}.
FAIL StripSpaces(Date.prototype.getUTCDate.toString()) should be functiongetUTCDate(){[nativecode]}. Was functiongetUTCDate(){returnGetUTCDateFrom(this)}.
FAIL StripSpaces(Date.prototype.getDay.toString()) should be functiongetDay(){[nativecode]}. Was functiongetDay(){vart=_ValueOf(this)if((!_IsSmi(IS_VAR(t))&&!(t==t)))returntreturnWeekDay(LocalTimeNoCheck(t))}.
FAIL StripSpaces(Date.prototype.getUTCDay.toString()) should be functiongetUTCDay(){[nativecode]}. Was functiongetUTCDay(){vart=_ValueOf(this)if((!_IsSmi(IS_VAR(t))&&!(t==t)))returntreturnWeekDay(t)}.
FAIL StripSpaces(Date.prototype.getHours.toString()) should be functiongetHours(){[nativecode]}. Was functiongetHours(){returnGetHoursFrom(this)}.
FAIL StripSpaces(Date.prototype.getUTCHours.toString()) should be functiongetUTCHours(){[nativecode]}. Was functiongetUTCHours(){returnGetUTCHoursFrom(this)}.
FAIL StripSpaces(Date.prototype.getMinutes.toString()) should be functiongetMinutes(){[nativecode]}. Was functiongetMinutes(){returnGetMinutesFrom(this)}.
FAIL StripSpaces(Date.prototype.getUTCMinutes.toString()) should be functiongetUTCMinutes(){[nativecode]}. Was functiongetUTCMinutes(){returnGetUTCMinutesFrom(this)}.
FAIL StripSpaces(Date.prototype.getSeconds.toString()) should be functiongetSeconds(){[nativecode]}. Was functiongetSeconds(){returnGetSecondsFrom(this)}.
FAIL StripSpaces(Date.prototype.getUTCSeconds.toString()) should be functiongetUTCSeconds(){[nativecode]}. Was functiongetUTCSeconds(){returnGetUTCSecondsFrom(this)}.
FAIL StripSpaces(Date.prototype.getMilliseconds.toString()) should be functiongetMilliseconds(){[nativecode]}. Was functiongetMilliseconds(){returnGetMillisecondsFrom(this)}.
FAIL StripSpaces(Date.prototype.getUTCMilliseconds.toString()) should be functiongetUTCMilliseconds(){[nativecode]}. Was functiongetUTCMilliseconds(){returnGetUTCMillisecondsFrom(this)}.
FAIL StripSpaces(Date.prototype.getTimezoneOffset.toString()) should be functiongetTimezoneOffset(){[nativecode]}. Was functiongetTimezoneOffset(){vart=(_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError())if((!_IsSmi(IS_VAR(t))&&!(t==t)))returntreturn(t-LocalTimeNoCheck(t))/60000}.
FAIL StripSpaces(Date.prototype.setTime.toString()) should be functionsetTime(){[nativecode]}. Was functionsetTime(ms){if(!(_ClassOf(this)==='Date'))ThrowDateTypeError()return_SetValueOf(this,TimeClip(ToNumber(ms)))}.
FAIL StripSpaces(Date.prototype.setMilliseconds.toString()) should be functionsetMilliseconds(){[nativecode]}. Was functionsetMilliseconds(ms){vart=LocalTime((_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError()))ms=ToNumber(ms)vartime=MakeTime(HourFromTime(t),MinFromTime(t),SecFromTime(t),ms)return_SetValueOf(this,TimeClip(UTC(MakeDate(Day(t),time))))}.
FAIL StripSpaces(Date.prototype.setUTCMilliseconds.toString()) should be functionsetUTCMilliseconds(){[nativecode]}. Was functionsetUTCMilliseconds(ms){vart=(_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError())ms=ToNumber(ms)vartime=MakeTime(HourFromTime(t),MinFromTime(t),SecFromTime(t),ms)return_SetValueOf(this,TimeClip(MakeDate(Day(t),time)))}.
FAIL StripSpaces(Date.prototype.setSeconds.toString()) should be functionsetSeconds(){[nativecode]}. Was functionsetSeconds(sec,ms){vart=LocalTime((_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError()))sec=ToNumber(sec)ms=_ArgumentsLength()<2?GetMillisecondsFrom(this):ToNumber(ms)vartime=MakeTime(HourFromTime(t),MinFromTime(t),sec,ms)return_SetValueOf(this,TimeClip(UTC(MakeDate(Day(t),time))))}.
FAIL StripSpaces(Date.prototype.setUTCSeconds.toString()) should be functionsetUTCSeconds(){[nativecode]}. Was functionsetUTCSeconds(sec,ms){vart=(_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError())sec=ToNumber(sec)ms=_ArgumentsLength()<2?GetUTCMillisecondsFrom(this):ToNumber(ms)vartime=MakeTime(HourFromTime(t),MinFromTime(t),sec,ms)return_SetValueOf(this,TimeClip(MakeDate(Day(t),time)))}.
FAIL StripSpaces(Date.prototype.setMinutes.toString()) should be functionsetMinutes(){[nativecode]}. Was functionsetMinutes(min,sec,ms){vart=LocalTime((_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError()))min=ToNumber(min)varargc=_ArgumentsLength()sec=argc<2?GetSecondsFrom(this):ToNumber(sec)ms=argc<3?GetMillisecondsFrom(this):ToNumber(ms)vartime=MakeTime(HourFromTime(t),min,sec,ms)return_SetValueOf(this,TimeClip(UTC(MakeDate(Day(t),time))))}.
FAIL StripSpaces(Date.prototype.setUTCMinutes.toString()) should be functionsetUTCMinutes(){[nativecode]}. Was functionsetUTCMinutes(min,sec,ms){vart=(_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError())min=ToNumber(min)varargc=_ArgumentsLength()sec=argc<2?GetUTCSecondsFrom(this):ToNumber(sec)ms=argc<3?GetUTCMillisecondsFrom(this):ToNumber(ms)vartime=MakeTime(HourFromTime(t),min,sec,ms)return_SetValueOf(this,TimeClip(MakeDate(Day(t),time)))}.
FAIL StripSpaces(Date.prototype.setHours.toString()) should be functionsetHours(){[nativecode]}. Was functionsetHours(hour,min,sec,ms){vart=LocalTime((_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError()))hour=ToNumber(hour)varargc=_ArgumentsLength()min=argc<2?GetMinutesFrom(this):ToNumber(min)sec=argc<3?GetSecondsFrom(this):ToNumber(sec)ms=argc<4?GetMillisecondsFrom(this):ToNumber(ms)vartime=MakeTime(hour,min,sec,ms)return_SetValueOf(this,TimeClip(UTC(MakeDate(Day(t),time))))}.
FAIL StripSpaces(Date.prototype.setUTCHours.toString()) should be functionsetUTCHours(){[nativecode]}. Was functionsetUTCHours(hour,min,sec,ms){vart=(_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError())hour=ToNumber(hour)varargc=_ArgumentsLength()min=argc<2?GetUTCMinutesFrom(this):ToNumber(min)sec=argc<3?GetUTCSecondsFrom(this):ToNumber(sec)ms=argc<4?GetUTCMillisecondsFrom(this):ToNumber(ms)vartime=MakeTime(hour,min,sec,ms)return_SetValueOf(this,TimeClip(MakeDate(Day(t),time)))}.
FAIL StripSpaces(Date.prototype.setDate.toString()) should be functionsetDate(){[nativecode]}. Was functionsetDate(date){vart=LocalTime((_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError()))date=ToNumber(date)varday=MakeDay(YearFromTime(t),MonthFromTime(t),date)return_SetValueOf(this,TimeClip(UTC(MakeDate(day,TimeWithinDay(t)))))}.
FAIL StripSpaces(Date.prototype.setUTCDate.toString()) should be functionsetUTCDate(){[nativecode]}. Was functionsetUTCDate(date){vart=(_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError())date=ToNumber(date)varday=MakeDay(YearFromTime(t),MonthFromTime(t),date)return_SetValueOf(this,TimeClip(MakeDate(day,TimeWithinDay(t))))}.
FAIL StripSpaces(Date.prototype.setMonth.toString()) should be functionsetMonth(){[nativecode]}. Was functionsetMonth(month,date){vart=LocalTime((_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError()))month=ToNumber(month)date=_ArgumentsLength()<2?GetDateFrom(this):ToNumber(date)varday=MakeDay(YearFromTime(t),month,date)return_SetValueOf(this,TimeClip(UTC(MakeDate(day,TimeWithinDay(t)))))}.
FAIL StripSpaces(Date.prototype.setUTCMonth.toString()) should be functionsetUTCMonth(){[nativecode]}. Was functionsetUTCMonth(month,date){vart=(_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError())month=ToNumber(month)date=_ArgumentsLength()<2?GetUTCDateFrom(this):ToNumber(date)varday=MakeDay(YearFromTime(t),month,date)return_SetValueOf(this,TimeClip(MakeDate(day,TimeWithinDay(t))))}.
FAIL StripSpaces(Date.prototype.setFullYear.toString()) should be functionsetFullYear(){[nativecode]}. Was functionsetFullYear(year,month,date){vart=(_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError())t=(!_IsSmi(IS_VAR(t))&&!(t==t))?0:LocalTimeNoCheck(t)year=ToNumber(year)varargc=_ArgumentsLength()month=argc<2?MonthFromTime(t):ToNumber(month)date=argc<3?DateFromTime(t):ToNumber(date)varday=MakeDay(year,month,date)return_SetValueOf(this,TimeClip(UTC(MakeDate(day,TimeWithinDay(t)))))}.
FAIL StripSpaces(Date.prototype.setUTCFullYear.toString()) should be functionsetUTCFullYear(){[nativecode]}. Was functionsetUTCFullYear(year,month,date){vart=(_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError())if((!_IsSmi(IS_VAR(t))&&!(t==t)))t=0varargc=_ArgumentsLength()year=ToNumber(year)month=argc<2?MonthFromTime(t):ToNumber(month)date=argc<3?DateFromTime(t):ToNumber(date)varday=MakeDay(year,month,date)return_SetValueOf(this,TimeClip(MakeDate(day,TimeWithinDay(t))))}.
FAIL StripSpaces(Date.prototype.setYear.toString()) should be functionsetYear(){[nativecode]}. Was functionsetYear(year){vart=LocalTime((_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError()))if((!_IsSmi(IS_VAR(t))&&!(t==t)))t=0year=ToNumber(year)if((!_IsSmi(IS_VAR(year))&&!(year==year)))return_SetValueOf(this,$NaN)year=(0<=(_IsSmi(IS_VAR(year))?year:ToInteger(year))&&(_IsSmi(IS_VAR(year))?year:ToInteger(year))<=99)?1900+(_IsSmi(IS_VAR(year))?year:ToInteger(year)):yearvarday=MakeDay(year,MonthFromTime(t),DateFromTime(t))return_SetValueOf(this,TimeClip(UTC(MakeDate(day,TimeWithinDay(t)))))}.
FAIL StripSpaces(Date.prototype.getYear.toString()) should be functiongetYear(){[nativecode]}. Was functiongetYear(){vart=(_ClassOf(this)==='Date'?_ValueOf(this):ThrowDateTypeError())if((!_IsSmi(IS_VAR(t))&&!(t==t)))return$NaNreturnYearFromTime(LocalTimeNoCheck(t))-1900}.
FAIL StripSpaces(Date.prototype.toGMTString.toString()) should be functiontoGMTString(){[nativecode]}. Was functiontoGMTString(){returnDateToUTCString.call(this)}.
FAIL StripSpaces(RegExp.prototype.exec.toString()) should be functionexec(){[nativecode]}. Was functionexec(string){if(!(_ClassOf(this)==='RegExp')){throwMakeTypeError('method_called_on_incompatible',['RegExp.prototype.exec',this])}if(_ArgumentsLength()==0){varregExpInput=((lastMatchInfo)[2])if((typeof(regExpInput)==='undefined')){throwMakeError('no_input_to_regexp',[this])}string=regExpInput}vars=ToString(string)varlength=s.lengthvarlastIndex=this.lastIndexvari=this.global?(_IsSmi(IS_VAR(lastIndex))?lastIndex:ToInteger(lastIndex)):0if(i<0||i>s.length){this.lastIndex=0returnnull}_Log('regexp','regexp-exec,%0r,%1S,%2i',[this,s,lastIndex])varmatchIndices=RegExpExec(this,s,i,lastMatchInfo)if(matchIndices==null){if(this.global)this.lastIndex=0returnmatchIndices}varnumResults=((lastMatchInfo)[0])>>1varresult=new$Array(numResults)for(vari=0i<numResultsi++){varmatchStart=lastMatchInfo[(3+(i<<1))]varmatchEnd=lastMatchInfo[(3+((i<<1)+1))]if(matchStart!=-1&&matchEnd!=-1){result[i]=SubString(s,matchStart,matchEnd)}else{result[i]=void0}}if(this.global)this.lastIndex=lastMatchInfo[4]result.index=lastMatchInfo[3]result.input=sreturnresult}.
FAIL StripSpaces(RegExp.prototype.test.toString()) should be functiontest(){[nativecode]}. Was functiontest(string){if(!(_ClassOf(this)==='RegExp')){throwMakeTypeError('method_called_on_incompatible',['RegExp.prototype.test',this])}if(_ArgumentsLength()==0){varregExpInput=((lastMatchInfo)[2])if((typeof(regExpInput)==='undefined')){throwMakeError('no_input_to_regexp',[this])}string=regExpInput}vars=ToString(string)varlength=s.lengthvarlastIndex=this.lastIndexvari=this.global?(_IsSmi(IS_VAR(lastIndex))?lastIndex:ToInteger(lastIndex)):0if(i<0||i>s.length){this.lastIndex=0returnfalse}_Log('regexp','regexp-exec,%0r,%1S,%2i',[this,s,lastIndex])varmatchIndices=RegExpExec(this,s,i,lastMatchInfo)if(matchIndices==null){if(this.global)this.lastIndex=0returnfalse}if(this.global)this.lastIndex=lastMatchInfo[4]returntrue}.
FAIL StripSpaces(RegExp.prototype.toString.toString()) should be functiontoString(){[nativecode]}. Was functiontoString(){varsrc=this.source?this.source:'(?:)'varresult='/'+src+'/'if(this.global)result+='g'if(this.ignoreCase)result+='i'if(this.multiline)result+='m'returnresult}.
FAIL StripSpaces(Error.prototype.toString.toString()) should be functiontoString(){[nativecode]}. Was functiontoString(){vartype=this.typeif(type&&!this.hasOwnProperty("message")){returnthis.name+":"+FormatMessage({type:type,args:this.arguments})}varmessage=this.messagereturnthis.name+(message?(":"+message):"")}.
PASS successfullyParsed is true

TEST COMPLETE
